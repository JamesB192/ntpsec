These are instructions for the portion of the documentation cleanup that can be
performed by an intern or student hire.

The 'I' referred to in this document is Eric Raymond, aka 'esr'.  You will
be working with him on documentation tasks.  You can reach him at
esr@thyrsus.com or find him on #icei-ntp.

Things you will need:

1. Command-line access to a Unix machine.

2. Knowledge of how to clone git repositories, and perform basic operations
   like checkouts, checkins, pulls, and oushes.

3. Ability to drive a text editor that can handle flat-ASCII documents. Emacs,
   vi, nano, joe, or anything in that class will do.

4. Firefox installed. (With a little additional technical knowledge you may be
   able to substitute a different preferred browser.)

5. asciidoc installed.

Background of the problem:

The NTP documentation, while exceptionally good at conveying the complex
technicalia of time synchronization, has suffered from neglect and bit-rotted
rather badly.  Many of the problems can only be fixed by a technical expert.
Some can be fixed by normal copy-editing, but the material is so dense and
tricky that even apparently simple changes need to be reviewed by an expert.

Complicating the task is that the documentation was written in raw
HTML.  The heavy markup of HTML, together with the fact that the
documentation was written with entire long paragraphs as single lines,
makes incremental review very difficult.  The first thing we need to
do is fix that.

Accordingly, I have converted the in-tree technical documentation to
a modern, lightweight format called asciidoc that can be rendered
to HTML, man pages, or PDFs and is much more easily reviewed by
human eyeballs.  The conversion was mostly done with a program called
pandoc; I then went through and fixed up things that pandoc barfs on,
like tables and certain kinds of compound highlighting.

Your first task is to verify that conversion has not lost or garbled
any of the HTML content.  pandoc's HTML parser is weak and I have caught
it silently dropping text from complex HTML; I have fixed what I spotted,
your job is to catch anything I missed.

Once this is done we can start on content changes.  For PR/political reasons
we need to have a very clear audit trail of those changes; thus, you will
not be doing them during the content-checking first pass.

How to get started:

1. Clone the issi docs repo from git@icei.org:issi/ntp-doc

2. Go to the ntp/docs subdirectory.  A copy of these instructions lives there
   in the file INSTRUCTIONS.

3. Type './rebuild' to remake all the HTML files.

4. Choose a .txt file; the first one, 'access.txt", will do.  Run
   './compare access'.  Leave the ".txt" off the name.

5. Observe that your Firefox instance now has two new tabs.  The left-hand
   (older) one renders a copy of the original HTML, from a directory named
   'html' under 'ntp'. All the files in there are write-locked copies of 
   HTML from the NTP source tree.  The right-hand (newer) one has the 
   HTML made from asciidoc.

   If you have a big enough screen, I find it is helpful to have two
   Firefox windows and drag the second tab into the other one.

6. Compare the two. You are looking for textual differences.

When you run 'compare', it rebuilds what it needs.

There is another little script, 'preview', that takes a master name
(without the '.txt') and throws the HTML rendering of it on your
browser.

If you want to make local copies of these with a different browser
substituted for Firefox go ahead.  The only requirement is that you
be able to display a specified page by giving it the path to the page
as an argument.

Work product:

The goal is to make the rendered HTML from asciidoc look as much as
possible like the original HTML, *not* (yet) to copy-edit either.

You should report especially on textual differences.  If you can fix
these, do it by editing the .txt file, checking in the change, and
pushing it.  Doing fixes may require you to learn some asciidoc; that is 
OK and can be counted towards your billable time.

You can ignore whitespace differences unless they carry information.
Inter-paragraph breaks and relative paragraph indentation *do* carry
information and you should fix or report differences.

When in doubt, report it.

The visual presentation of the pages does not exactly match.  If you 
have CSS skills, you may edit the file ntp.css attempting to fix this.

Your work product must include a list of textual defects you found.  If
you fix the glitches, your commit messages count as defect reports.

It will save you work in the second pass if you mke a list of spelling
errors and other content glitches that both versions share.  Don't fix
them yet; that will happen in the second pass.

That's it.






