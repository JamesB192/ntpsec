def configure(ctx):
	ctx.check_type("uintptr_t")
	ctx.check_cc(header_name="dirent.h", mandatory=False)
	ctx.check_cc(header_name="sysexits.h", mandatory=False)



def build(ctx):
	srcnode = ctx.srcnode.abspath()
	bldnode = ctx.bldnode.abspath()

	libopts_source = [
		"libopts/libopts.c"
	]

	ctx(
		target		= "opts",
		features	= "c cstlib bld_include src_include libisc_include",
		source		= libopts_source,
		defines		= ["HAVE_CONFIG_H=1"],
		includes	= [
						"%s/sntp/libopts/" % srcnode,
					],
	)

	libsntp_source = [
		"crypto.c",
		"kod_management.c",
		"log.c",
		"main.c",
		"networking.c",
		"sntp-opts.c",
		"utilities.c"
	]

	ctx(
		target		= "sntp_obj", # XXX: to avoid target clash lookup how to fix this.
		features	= "c bld_include src_include libisc_include libopts_include ntp_version",
		source		= libsntp_source,
		defines		= ["HAVE_CONFIG_H=1"],
		includes	= [
						"%s/sntp/" % bldnode
					] + ctx.env.PLATFORM_INCLUDES,
	)


	ctx(
		target		= "sntp_lib", # XXX: to avoid target clash lookup how to fix this.
		features	= "c cstlib",
		use			= "sntp_obj"
	)


	sntp_source = [
		"sntp.c"
	]

	ctx(
		target		= "sntp",
		features	= "c cprogram bld_include src_include libisc_include libopts_include",
		use			= "ntp isc opts M PTHREAD sntp_obj LIBEVENT LIBEVENT_CORE LIBEVENT_PTHREADS",
		source		= sntp_source,
		defines		= ["HAVE_CONFIG_H=1"]
	)
