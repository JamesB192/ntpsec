#!/usr/bin/env python
"""\
ntpviz - logfile visualizer for NTP log files

Usage: ntpviz [-d statsdir] [-g] [-n name] [-p period]
              [-s starttime]  [-e endtime]
              [--local-offset | --local-jitter | --local-stability]
              [--peer-offsets=hosts | --all-peer-offsets]
              [--peer-jitters=hosts | --all-peer-jitters]

See the manual page for details.

Python by ESR, concept and GNUPLOT code by Dan Drown.
"""
#SPDX-License-Identifier: BSD-2-Clause
from __future__ import print_function, division

import os, sys, getopt, socket
from ntpstats import *

# RMS frequency jitter - Deviation from a root-mean-square linear approximation?
# Investigate.

class NTPViz(NTPStats):
    "Class for visualizing statistics from a single server."
    Common = """\
set terminal png size 900,600
set xdata time
set grid
set xlabel "Time"
set format x "@d-@H:@M"
set timefmt "@s"
set xtic rotate by -45 scale 0
set lmargin 12
set rmargin 12
"""
    def __init__(self, sitename, statsdir):
        NTPStats.__init__(self, sitename, statsdir)
    def local_clock_gnuplot(self):
        "Generate GNUPLOT code graphing local clock loop statistics"
        sitename = self.sitename
        plot_template = NTPViz.Common + """\
set title "%(sitename)s: Local Clock Offsets"
set ytics format "@1.2f us" nomirror textcolor rgb '#0060ad'
set y2tics format "@2.3f ppm" nomirror textcolor rgb '#dd181f'
set key bottom right box
set style line 1 lc rgb '#0060ad' lt 1 lw 1 pt 7 ps 0   # --- blue
set style line 2 lc rgb '#dd181f' lt 1 lw 1 pt 5 ps 0   # --- red
plot \
 "-" using 1:($2*1000000) title "clock offset us" with linespoints ls 1, \
 "-" using 1:3 title "frequency offset ppm" with linespoints ls 2 axis x1y2
""" % locals()
        return plot_template.replace('@', '%') + self.dump("loopstats") + "e\n" + self.dump("loopstats")
    def loopstats_gnuplot(self, fld, title, legend):
        "Generate GNUPLOT code of a given loopstats field"
        sitename   = self.sitename
        ninetynine = self.percentile(fld, 95, self.loopstats) * 1000000
        ninetyfive = self.percentile(fld, 99, self.loopstats) * 1000000
        five       = self.percentile(fld,  5, self.loopstats) * 1000000
        one        = self.percentile(fld,  1, self.loopstats) * 1000000
        nf_m_f     = ninetyfive - five
        nn_m_o     = ninetynine - one
        plot_template = NTPViz.Common + """\
set title "%(sitename)s: %(title)s"
set ytics format "@1.2f us" nomirror
set key top right box
set style line 1 lc rgb '#0060ad' lt 1 lw 1 pt 7 ps 0   # --- blue
set style line 2 lc rgb '#dd181f' lt 1 lw 1 pt 5 ps 0   # --- red
set label 1 gprintf("99@@ = %(ninetynine)s us",99) at graph 0.01,0.95 left front
set label 2 gprintf("95@@ = %(ninetyfive)s us",95) at graph 0.01,0.9 left front
set label 3 gprintf(" 5@@ = %(five)s us",5) at graph 0.01,0.85 left front
set label 4 gprintf(" 1@@ = %(one)s us",1) at graph 0.01,0.8 left front
set label 5 gprintf("95@@ - 5@@ = %(nf_m_f)s us",90) at graph 0.01,0.75 left front
set label 6 gprintf("99@@ - 1@@ = %(nn_m_o) us",98) at graph 0.01,0.7 left front
plot \
 "-" using 1:($%(fld)d*1000000) title "%(legend)s" with linespoints ls 1, \
 %(ninetynine)s title "99th percentile", \
 %(ninetyfive)s title "95th percentile", \
 %(five)s title "5th percentile", \
 %(one)s title "1st percentile"
""" % locals()
        return plot_template.replace('@', '%') + self.dump("loopstats")
    def local_clock_jitter_gnuplot(self):
        "Generate GNUPLOT code of local clock loop standard deviation"
        return self.loopstats_gnuplot(4, "RMS Time jitter", "Jitter")
    def local_clock_stability_gnuplot(self):
        "Generate GNUPLOT code graphing local clock stability"
        return self.loopstats_gnuplot(5, "RMS Frequency Jitter", "Stability")
    def peerstats_gnuplot(self, peerlist, fld, title):
        "Plot a specified field from peerstats."
        sitename = self.sitename
        peerdict = self.peersplit()
        if not peerlist:
            peerlist = list(peerdict.keys())
        peerlist.sort()	# For stability of output
        if len(peerlist) == 1:
            title += ": "+ peerlist[0]
        else:
            title += "s"
        plot_template = NTPViz.Common + """\
set title "%(sitename)s: %(title)s"
set ylabel ""
set ytics format "@1.0f us" nomirror
set key top right box
plot \\
""" % locals()
	plot_template = plot_template.replace("@", "%")
        for key in peerlist:
            plot_template += "'-' using 1:($%d*1000000) title '%s' with line, \\\n" % (fld, self.ip_label(key))
        
        plot_template = plot_template[:-4] + "\n"
        for key in peerlist:
            # Trickiness - we allow peerlist elements to be DNS names.
            # The socket.gethostbyname() call maps these to IP addresses,
            # passing through literal IP addresses unaltered.
            ip = socket.gethostbyname(key)
            if ip in peerdict:
                plot_template += "\n".join(peerdict[ip]) + "\ne\n"
            else:
                sys.stderr.write("No such peer as %s" % key)
                raise SystemExit(1)
        return plot_template[:-2]
    def peer_offsets_gnuplot(self, peerlist):
        return self.peerstats_gnuplot(peerlist, 4, "Peer clock offset")
    def peer_jitters_gnuplot(self, peerlist):
        return self.peerstats_gnuplot(peerlist, 7, "Peer clock jitter")
    def peer_rtt_gnuplot(self, host):
        "Plot offset with rtt bounds for specified host."
        sitename = self.sitename
        entries = self.peersplit()[host]
        fifty = self.percentile(4,  50, entries) * 1000000
        host = self.ip_label(host)
        plot_template = NTPViz.Common + """\
set title "%(sitename)s: offset of %(host)s"
set ylabel ""
set ytics format "@1.0f us" nomirror
set key top right box
plot \
'-' using 1:($4*1000000) title 'offset' with line, \
'-' using 1:(($4+$5/2)*1000000) title 'offset+rtt/2' with line, \
'-' using 1:(($4-$5/2)*1000000) title 'offset-rtt/2' with line, \
%(fifty)s title '50th percentile'
""" % locals()
	plot_template = plot_template.replace("@", "%")
        data = "\n".join(entries)
        plot_template += data + "\ne\n"	+ data + "\ne\n" + data
        return plot_template



if __name__ == '__main__':
    try:
        (options, arguments) = getopt.getopt(sys.argv[1:], "d:e:ghn:p:s:", [
            "local-offset", "local-jitter", "local-stability",
            "all-peer-offsets", "peer-offsets=",
            "all-peer-jitters", "peer-jitters=",
            "peer-rtt=",
            ])
    except getopt.GetoptError as err:
        sys.stderr.write(str(err) + "\n")
        raise SystemExit(2)
    period = 7	# days
    sitename = None
    statsdirs = ["/var/log/ntpstats"]
    endtime = starttime = None
    generate = False
    show_local_offset = show_local_jitter = show_local_stability = False
    show_peer_offsets = show_peer_jitters = None
    show_peer_rtt = None
    for (switch, val) in options:
        if switch == "-d":
            statsdirs = val.split(",")
        elif switch == "-e":
            endtime = isotime(val)
        elif switch == "-g":
            generate = True
        elif switch == "-h":
            sys.stdout.write(__doc__)
            raise SystemExit(0)
        elif switch == "-n":
            sitename = val
        elif switch == "-p":
            period = int(val)	# Denominated in days
        elif switch == "-s":
            starttime = isotime(val)
        elif switch == "--local-offset":
            show_local_offset = True
        elif switch == "--local-jitter":
            show_local_jitter = True
        elif switch == "--local-stability":
            show_local_stability = True
        elif switch == "--peer-offsets":
            show_peer_offsets = val.split(",")
        elif switch == "--all-peer-offsets":
            show_peer_offsets = []
        elif switch == "--peer-jitters":
            show_peer_jitters = val.split(",")
        elif switch == "--all-peer-jitters":
            show_peer_jitters = []
        elif switch == "--peer-rtt":
            show_peer_rtt = val
    period *= 24 * 60 * 60
    statlist = [NTPViz(sitename=sitename, statsdir=d) for d in statsdirs]
    for stats in statlist:
        # Default to one week before the latest date
        if endtime is None and starttime == None:
            endtime = int(stats.rangemax())
            starttime = endtime - period
        elif starttime is None and endtime is not None:
            starttime = endtime - period
        elif starttime is not None and endtime is None:
            endtime = starttime + period
        if stats.sitename is None:
            stats.sitename = os.path.basename(statsdir)
        if starttime:
            stats.clip(starttime, endtime)

    for fontpath in ("/usr/share/fonts/liberation",
                     "/usr/share/fonts/liberation-fonts",
                     "/usr/share/fonts/truetype/liberation"):

        if os.path.exists(fontpath):
            os.environ["GDFONTPATH"] = fontpath
            break
    else:
        sys.stderr.write("warning: liberation truetype fonts not found\n")
    os.environ["GNUPLOT_DEFAULT_GDFONT"] = "LiberationSans-Regular"

    if len(statlist) == 1:
        stats = statlist[0]
        if show_local_offset or show_local_jitter or show_local_stability:
            if not stats.loopstats:
                sys.stderr.write("ntpviz: missing loopstats data\n")
                raise SystemExit(1)
            if show_local_offset + show_local_jitter + show_local_stability > 1:
                sys.stderr.write("ntpviz: clash of mode options\n")
                raise SystemExit(1)
            if show_local_offset:
                plot = stats.local_clock_gnuplot()
            if show_local_jitter:
                plot = stats.local_clock_jitter_gnuplot()
            if show_local_stability:
                plot = stats.local_clock_stability_gnuplot()
            if generate:
                gnuplot(plot)
            else:
                sys.stdout.write(plot)
            raise SystemExit(0)

        if show_peer_offsets is not None or show_peer_jitters is not None or show_peer_rtt is not None:
            if not stats.loopstats:
                sys.stderr.write("ntpviz: missing peerstats data\n")
                raise SystemExit(1)
            if show_peer_offsets is not None:
                plot = stats.peer_offsets_gnuplot(show_peer_offsets)
            if show_peer_jitters is not None:
                plot = stats.peer_jitters_gnuplot(show_peer_jitters)
            if show_peer_rtt is not None:
                plot = stats.peer_rtt_gnuplot(show_peer_rtt)
            if generate:
                gnuplot(plot)
            else:
                sys.stdout.write(plot)
            raise SystemExit(0)

# end
