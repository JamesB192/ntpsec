= plot_summary(1) =
:doctype: manpage
:ntpqman: ntpq(1)
:ntpdman: ntpd(8)

== NAME ==
ntp-keygen - Create a NTP host key

== SYNOPSIS ==
ntp-keygen [--option-name | --option-name 'value' ]

== DESCRIPTION ==

This program generates cryptographic data files used by the NTPv4
authentication and identification schemes. It generates MD5 key files
used in symmetric key cryptography. In addition, if the OpenSSL software
library has been installed, it generates keys, certificate and identity
files used in public key cryptography. These files are used for cookie
encryption, digital signature and challenge/response identification
algorithms compatible with the Internet standard security
infrastructure.

All files are in PEM-encoded printable ASCII format, so they can be
embedded as MIME attachments in mail to other sites and certificate
authorities. By default, files are not encrypted.

When used to generate message digest keys, the program produces a file
containing ten pseudo-random printable ASCII strings suitable for the
MD5 message digest algorithm included in the distribution. If the
OpenSSL library is installed, it produces an additional ten hex-encoded
random bit strings suitable for the SHA1 and other message digest
algorithms. The message digest keys file must be distributed and stored
using secure means beyond the scope of NTP itself. Besides the keys used
for ordinary NTP associations, additional keys can be defined as
passwords for the {ntpqman} utility program.

The remaining generated files are compatible with other OpenSSL
applications and other Public Key Infrastructure (PKI) resources.
Certificates generated by this program are compatible with extant
industry practice, although some users might find the interpretation of
X509v3 extension fields somewhat liberal. However, the identity keys are
probably not compatible with anything other than Autokey.

Some files used by this program are encrypted using a private password.
The `-p` option specifies the password for local encrypted files and the
`-q` option the password for encrypted files sent to remote sites. If no
password is specified, the host name returned by the Unix
_gethostname_() function, normally the DNS name of the host is used.

The _pw_ option of the _crypto_ configuration command specifies the read
password for previously encrypted local files. This must match the local
password used by this program. If not specified, the host name is used.
Thus, if files are generated by this program without password, they can
be read back by _ntpd_ without password but only on the same host.

Normally, encrypted files for each host are generated by that host and
used only by that host, although exceptions exist as noted later on this
page. The symmetric keys file, normally called _ntp.keys_, is usually
installed in `/etc`. Other files and links are usually installed in
`/usr/local/etc`, which is normally in a shared filesystem in
NFS-mounted networks and cannot be changed by shared clients. The
location of the keys directory can be changed by the _keysdir_
configuration command in such cases. Normally, this is in `/etc`.

This program directs commentary and error messages to the standard error
stream _stderr_ and remote files to the standard output stream _stdout_
where they can be piped to other applications or redirected to files.
The names used for generated files and links all begin with the string
_ntpkey_ and include the file type, generating host and filestamp, as
described in the "Cryptographic Data Files" section below.

== Running the Program ==

To test and gain experience with Autokey concepts, log in as root and
change to the keys directory, usually `/usr/local/etc` When run for the
first time, or if all files with names beginning with _ntpkey_ have been
removed, use the `ntp-keygen` command without arguments to generate a
default RSA host key and matching RSA-MD5 certificate with expiration
date one year hence. If run again without options, the program uses the
existing keys and parameters and generates only a new certificate with
new expiration date one year hence.

Run the command on as many hosts as necessary. Designate one of them as
the trusted host (TH) using `ntp-keygen` with the `-T` option and
configure it to synchronize from reliable Internet servers. Then
configure the other hosts to synchronize to the TH directly or
indirectly. A certificate trail is created when Autokey asks the
immediately ascendant host towards the TH to sign its certificate, which
is then provided to the immediately descendant host on request. All
group hosts should have acyclic certificate trails ending on the TH.

The host key is used to encrypt the cookie when required and so must be
RSA type. By default, the host key is also the sign key used to encrypt
signatures. A different sign key can be assigned using the `-S` option
and this can be either RSA or DSA type. By default, the signature
message digest type is MD5, but any combination of sign key type and
message digest type supported by the OpenSSL library can be specified
using the `-c` option. The rules say cryptographic media should be
generated with proventic filestamps, which means the host should already
be synchronized before this program is run. This of course creates a
chicken-and-egg problem when the host is started for the first time.
Accordingly, the host time should be set by some other means, such as
eyeball-and-wristwatch, at least so that the certificate lifetime is
within the current year. After that and when the host is synchronized to
a proventic source, the certificate should be re-generated.

Additional information on trusted groups and identity schemes is on the
"Autokey Public-Key Authentication" page.

The {ntpdman} configuration command _crypto_ _pw_ _password_
specifies the read password for previously encrypted files. The daemon
expires on the spot if the password is missing or incorrect. For
convenience, if a file has been previously encrypted, the default read
password is the name of the host running the program. If the previous
write password is specified as the host name, these files can be read by
that host with no explicit password.

File names begin with the prefix _ntpkey__ and end with the postfix
__hostname.filestamp_, where _hostname_ is the owner name, usually the
string returned by the Unix gethostname() routine, and _filestamp_ is
the NTP seconds when the file was generated, in decimal digits. This
both guarantees uniqueness and simplifies maintenance procedures, since
all files can be quickly removed by a _rm_ _ntpkey*_ command or all
files generated at a specific time can be removed by a _rm_ _*filestamp_
command. To further reduce the risk of misconfiguration, the first two
lines of a file contain the file name and generation date and time as
comments.

All files are installed by default in the keys directory
`/usr/local/etc`, which is normally in a shared filesystem in
NFS-mounted networks. The actual location of the keys directory and each
file can be overridden by configuration commands, but this is not
recommended. Normally, the files for each host are generated by that
host and used only by that host, although exceptions exist as noted
later on this page.

Normally, files containing private values, including the host key, sign
key and identification parameters, are permitted root read/write-only;
while others containing public values are permitted world readable.
Alternatively, files containing private values can be encrypted and
these files permitted world readable, which simplifies maintenance in
shared file systems. Since uniqueness is insured by the hostname and
file name extensions, the files for a NFS server and dependent clients
can all be installed in the same shared directory.

The recommended practice is to keep the file name extensions when
installing a file and to install a soft link from the generic names
specified elsewhere on this page to the generated files. This allows new
file generations to be activated simply by changing the link. If a link
is present, ntpd follows it to the file name to extract the filestamp.
If a link is not present, {ntpdman} extracts the filestamp from
the file itself. This allows clients to verify that the file and
generation times are always current. The `ntp-keygen` program uses the
same timestamp extension for all files generated at one time, so each
generation is distinct and can be readily recognized in monitoring data.

== Running the program ==

The safest way to run the `ntp-keygen` program is logged in directly as
root. The recommended procedure is change to the keys directory, usually
`/usr/local/etc`, then run the program. When run for the first time, or
if all _ntpkey_ files have been removed, the program generates a RSA
host key file and matching RSA-MD5 certificate file, which is all that
is necessary in many cases. The program also generates soft links from
the generic names to the respective files. If run again, the program
uses the same host key file, but generates a new certificate file and
link.

The host key is used to encrypt the cookie when required and so must be
RSA type. By default, the host key is also the sign key used to encrypt
signatures. When necessary, a different sign key can be specified and
this can be either RSA or DSA type. By default, the message digest type
is MD5, but any combination of sign key type and message digest type
supported by the OpenSSL library can be specified, including those using
the MD2, MD5, SHA, SHA1, MDC2 and RIPE160 message digest algorithms.
However, the scheme specified in the certificate must be compatible with
the sign key. Certificates using any digest algorithm are compatible
with RSA sign keys; however, only SHA and SHA1 certificates are
compatible with DSA sign keys.

Private/public key files and certificates are compatible with other
OpenSSL applications and very likely other libraries as well.
Certificates or certificate requests derived from them should be
compatible with extant industry practice, although some users might find
the interpretation of X509v3 extension fields somewhat liberal. However,
the identification parameter files, although encoded as the other files,
are probably not compatible with anything other than Autokey.

Running the program as other than root and using the Unix _su_ command
to assume root may not work properly, since by default the OpenSSL
library looks for the random seed file `.rnd` in the user home
directory. However, there should be only one `.rnd`, most conveniently
in the root directory, so it is convenient to define the _$RANDFILE_
environment variable used by the OpenSSL library as the path to `/.rnd`.

Installing the keys as root might not work in NFS-mounted shared file
systems, as NFS clients may not be able to write to the shared keys
directory, even as root. In this case, NFS clients can specify the files
in another directory such as `/etc` using the _keysdir_ command. There
is no need for one client to read the keys and certificates of other
clients or servers, as these data are obtained automatically by the
Autokey protocol.

Ordinarily, cryptographic files are generated by the host that uses
them, but it is possible for a trusted agent (TA) to generate these
files for other hosts; however, in such cases files should always be
encrypted. The subject name and trusted name default to the hostname of
the host generating the files, but can be changed by command line
options. It is convenient to designate the owner name and trusted name
as the subject and issuer fields, respectively, of the certificate. The
owner name is also used for the host and sign key files, while the
trusted name is used for the identity files.

All files are installed by default in the keys directory
`/usr/local/etc`, which is normally in a shared filesystem in
NFS-mounted networks. The actual location of the keys directory and each
file can be overridden by configuration commands, but this is not
recommended. Normally, the files for each host are generated by that
host and used only by that host, although exceptions exist as noted
later on this page.

Normally, files containing private values, including the host key, sign
key and identification parameters, are permitted root read/write-only;
while others containing public values are permitted world readable.
Alternatively, files containing private values can be encrypted and
these files permitted world readable, which simplifies maintenance in
shared file systems. Since uniqueness is insured by the hostname and
file name extensions, the files for a NFS server and dependent clients
can all be installed in the same shared directory.

The recommended practice is to keep the file name extensions when
installing a file and to install a soft link from the generic names
specified elsewhere on this page to the generated files. This allows new
file generations to be activated simply by changing the link. If a link
is present, ntpd follows it to the file name to extract the filestamp.
If a link is not present, {ntpdman} extracts the filestamp from
the file itself. This allows clients to verify that the file and
generation times are always current. The `ntp-keygen` program uses the
same timestamp extension for all files generated at one time, so each
generation is distinct and can be readily recognized in monitoring data.

== Running the program ==

The safest way to run the `ntp-keygen` program is logged in directly as
root. The recommended procedure is change to the keys directory, usually
`/usr/local/etc`, then run the program. When run for the first time, or
if all _ntpkey_ files have been removed, the program generates a RSA
host key file and matching RSA-MD5 certificate file, which is all that
is necessary in many cases. The program also generates soft links from
the generic names to the respective files. If run again, the program
uses the same host key file, but generates a new certificate file and
link.

The host key is used to encrypt the cookie when required and so must be
RSA type. By default, the host key is also the sign key used to encrypt
signatures. When necessary, a different sign key can be specified and
this can be either RSA or DSA type. By default, the message digest type
is MD5, but any combination of sign key type and message digest type
supported by the OpenSSL library can be specified, including those using
the MD2, MD5, SHA, SHA1, MDC2 and RIPE160 message digest algorithms.
However, the scheme specified in the certificate must be compatible with
the sign key. Certificates using any digest algorithm are compatible
with RSA sign keys; however, only SHA and SHA1 certificates are
compatible with DSA sign keys.

Private/public key files and certificates are compatible with other
OpenSSL applications and very likely other libraries as well.
Certificates or certificate requests derived from them should be
compatible with extant industry practice, although some users might find
the interpretation of X509v3 extension fields somewhat liberal. However,
the identification parameter files, although encoded as the other files,
are probably not compatible with anything other than Autokey.

Running the program as other than root and using the Unix _su_ command
to assume root may not work properly, since by default the OpenSSL
library looks for the random seed file `.rnd` in the user home
directory. However, there should be only one `.rnd`, most conveniently
in the root directory, so it is convenient to define the _$RANDFILE_
environment variable used by the OpenSSL library as the path to `/.rnd`.

Installing the keys as root might not work in NFS-mounted shared file
systems, as NFS clients may not be able to write to the shared keys
directory, even as root. In this case, NFS clients can specify the files
in another directory such as `/etc` using the _keysdir_ command. There
is no need for one client to read the keys and certificates of other
clients or servers, as these data are obtained automatically by the
Autokey protocol.

Ordinarily, cryptographic files are generated by the host that uses
them, but it is possible for a trusted agent (TA) to generate these
files for other hosts; however, in such cases files should always be
encrypted. The subject name and trusted name default to the hostname of
the host generating the files, but can be changed by command line
options. It is convenient to designate the owner name and trusted name
as the subject and issuer fields, respectively, of the certificate. The
owner name is also used for the host and sign key files, while the
trusted name is used for the identity files. seconds. seconds. s Trusted
Hosts and Groups Each cryptographic configuration involves selection of
a signature scheme and identification scheme, called a cryptotype, as
explained in the _Authentication_ _Options_ section of _ntp.conf_(5).
The default cryptotype uses RSA encryption, MD5 message digest and TC
identification. First, configure a NTP subnet including one or more
low-stratum trusted hosts from which all other hosts derive
synchronization directly or indirectly. Trusted hosts have trusted
certificates; all other hosts have nontrusted certificates. These hosts
will automatically and dynamically build authoritative certificate
trails to one or more trusted hosts. A trusted group is the set of all
hosts that have, directly or indirectly, a certificate trail ending at a
trusted host. The trail is defined by static configuration file entries
or dynamic means described on the _Automatic_ _NTP_ _Configuration_
_Options_ section of _ntp.conf_(5).

On each trusted host as root, change to the keys directory. To insure a
fresh fileset, remove all _ntpkey_ files. Then run `ntp-keygen` `-T` to
generate keys and a trusted certificate. On all other hosts do the same,
but leave off the `-T` flag to generate keys and nontrusted
certificates. When complete, start the NTP daemons beginning at the
lowest stratum and working up the tree. It may take some time for
Autokey to instantiate the certificate trails throughout the subnet, but
setting up the environment is completely automatic.

If it is necessary to use a different sign key or different
digest/signature scheme than the default, run `ntp-keygen` with the `-S`
type option, where _type_ is either _RSA_ or _DSA_. The most often need
to do this is when a DSA-signed certificate is used. If it is necessary
to use a different certificate scheme than the default, run `ntp-keygen`
with the `-c` scheme option and selected _scheme_ as needed. f
`ntp-keygen` is run again without these options, it generates a new
certificate using the same scheme and sign key.

After setting up the environment it is advisable to update certificates
from time to time, if only to extend the validity interval. Simply run
`ntp-keygen` with the same flags as before to generate new certificates
using existing keys. However, if the host or sign key is changed,
{ntpdman} should be restarted. When {ntpdman} is
restarted, it loads any new files and restarts the protocol. Other
dependent hosts will continue as usual until signatures are refreshed,
at which time the protocol is restarted.

== Identity Schemes ==

As mentioned on the Autonomous Authentication page, the default TC
identity scheme is vulnerable to a middleman attack. However, there are
more secure identity schemes available, including PC, IFF, GQ and MV
described on the "Identification Schemes" page (maybe available at
_http://www.eecis.udel.edu/%7emills/keygen.html_). These schemes are
based on a TA, one or more trusted hosts and some number of nontrusted
hosts. Trusted hosts prove identity using values provided by the TA,
while the remaining hosts prove identity using values provided by a
trusted host and certificate trails that end on that host. The name of a
trusted host is also the name of its sugroup and also the subject and
issuer name on its trusted certificate. The TA is not necessarily a
trusted host in this sense, but often is.

In some schemes there are separate keys for servers and clients. A
server can also be a client of another server, but a client can never be
a server for another client. In general, trusted hosts and nontrusted
hosts that operate as both server and client have parameter files that
contain both server and client keys. Hosts that operate only as clients
have key files that contain only client keys.

The PC scheme supports only one trusted host in the group. On trusted
host alice run `ntp-keygen` `-P` `-p` password to generate the host key
file _ntpkey_RSAkey_alice.filestamp_ and trusted private certificate
file _ntpkey_RSA-MD5_cert_alice.filestamp_. Copy both files to all group
hosts; they replace the files which would be generated in other schemes.
On each host bob install a soft link from the generic name
_ntpkey_host_bob_ to the host key file and soft link _ntpkey_cert_bob_
to the private certificate file. Note the generic links are on bob, but
point to files generated by trusted host alice. In this scheme it is not
possible to refresh either the keys or certificates without copying them
to all other hosts in the group.

For the IFF scheme proceed as in the TC scheme to generate keys and
certificates for all group hosts, then for every trusted host in the
group, generate the IFF parameter file. On trusted host alice run
`ntp-keygen` `-T` `-I` `-p` password to produce her parameter file
_ntpkey_IFFpar_alice.filestamp_, which includes both server and client
keys. Copy this file to all group hosts that operate as both servers and
clients and install a soft link from the generic _ntpkey_iff_alice_ to
this file. If there are no hosts restricted to operate only as clients,
there is nothing further to do. As the IFF scheme is independent of keys
and certificates, these files can be refreshed as needed.

If a rogue client has the parameter file, it could masquerade as a
legitimate server and present a middleman threat. To eliminate this
threat, the client keys can be extracted from the parameter file and
distributed to all restricted clients. After generating the parameter
file, on alice run `ntp-keygen` `-e` and pipe the output to a file or
mail program. Copy or mail this file to all restricted clients. On these
clients install a soft link from the generic _ntpkey_iff_alice_ to this
file. To further protect the integrity of the keys, each file can be
encrypted with a secret password.

For the GQ scheme proceed as in the TC scheme to generate keys and
certificates for all group hosts, then for every trusted host in the
group, generate the IFF parameter file. On trusted host alice run
`ntp-keygen` `-T` `-G` `-p` password to produce her parameter file
_ntpkey_GQpar_alice.filestamp_, which includes both server and client
keys. Copy this file to all group hosts and install a soft link from the
generic _ntpkey_gq_alice_ to this file. In addition, on each host bob
install a soft link from generic _ntpkey_gq_bob_ to this file. As the GQ
scheme updates the GQ parameters file and certificate at the same time,
keys and certificates can be regenerated as needed.

For the MV scheme, proceed as in the TC scheme to generate keys and
certificates for all group hosts. For illustration assume trish is the
TA, alice one of several trusted hosts and bob one of her clients. On TA
trish run `ntp-keygen` `-V` n `-p` password, where _n_ is the number of
revokable keys (typically 5) to produce the parameter file
_ntpkeys_MVpar_trish.filestamp_ and client key files
_ntpkeys_MVkeyd_trish.filestamp_ where _d_ is the key number (0 < _d_ <
_n_). Copy the parameter file to alice and install a soft link from the
generic _ntpkey_mv_alice_ to this file. Copy one of the client key files
to alice for later distribution to her clients. It doesn't matter which
client key file goes to alice, since they all work the same way. Alice
copies the client key file to all of her cliens. On client bob install a
soft link from generic _ntpkey_mvkey_bob_ to the client key file. As the
MV scheme is independent of keys and certificates, these files can be
refreshed as needed.

== Command Line Options ==

`-c` scheme::
  Select certificate message digest/signature encryption scheme. The
  _scheme_ can be one of the following: RSA-MD2 , RSA-MD5 , RSA-SHA ,
  RSA-SHA1 , RSA-MDC2 , RSA-RIPEMD160 , DSA-SHA , or DSA-SHA1. Note that
  RSA schemes must be used with a RSA sign key and DSA schemes must be
  used with a DSA sign key. The default without this option is
  _RSA-MD5_.
`-d`::
  Enable debugging. This option displays the cryptographic data produced
  in eye-friendly billboards.
`-e`::
  Write the IFF client keys to the standard output. This is intended for
  automatic key distribution by mail.
`-G`::
  Generate parameters and keys for the GQ identification scheme,
  obsoleting any that may exist.
`-g`::
  Generate keys for the GQ identification scheme using the existing GQ
  parameters. If the GQ parameters do not yet exist, create them first.
`-H`::
  Generate new host keys, obsoleting any that may exist.
`-I`::
  Generate parameters for the IFF identification scheme, obsoleting any
  that may exist.
`-i` name::
  Set the suject name to _name_. This is used as the subject field in
  certificates and in the file name for host and sign keys.
`-M`::
  Generate MD5 keys, obsoleting any that may exist.
`-P`::
  Generate a private certificate. By default, the program generates
  public certificates.
`-p` password::
  Encrypt generated files containing private data with _password_ and
  the DES-CBC algorithm.
`-q`::
  Set the password for reading files to password.
`-S` [_RSA_ | _DSA_]::
  Generate a new sign key of the designated type, obsoleting any that
  may exist. By default, the program uses the host key as the sign key.
`-s` name::
  Set the issuer name to _name_. This is used for the issuer field in
  certificates and in the file name for identity files.
`-T`::
  Generate a trusted certificate. By default, the program generates a
  non-trusted certificate.
`-V` nkeys::
  Generate parameters and keys for the Mu-Varadharajan (MV)
  identification scheme.

== Random Seed File ==

All cryptographically sound key generation schemes must have means to
randomize the entropy seed used to initialize the internal pseudo-random
number generator used by the library routines. The OpenSSL library uses
a designated random seed file for this purpose. The file must be
available when starting the NTP daemon and `ntp-keygen` program. If a
site supports OpenSSL or its companion OpenSSH, it is very likely that
means to do this are already available.

It is important to understand that entropy must be evolved for each
generation, for otherwise the random number sequence would be
predictable. Various means dependent on external events, such as
keystroke intervals, can be used to do this and some systems have
built-in entropy sources. Suitable means are described in the OpenSSL
software documentation, but are outside the scope of this page.

The entropy seed used by the OpenSSL library is contained in a file,
usually called `.rnd`, which must be available when starting the NTP
daemon or the `ntp-keygen` program. The NTP daemon will first look for
the file using the path specified by the _randfile_ subcommand of the
_crypto_ configuration command. If not specified in this way, or when
starting the `ntp-keygen` program, the OpenSSL library will look for the
file using the path specified by the RANDFILE environment variable in
the user home directory, whether root or some other user. If the
RANDFILE environment variable is not present, the library will look for
the `.rnd` file in the user home directory. If the file is not available
or cannot be written, the daemon exits with a message to the system log
and the program exits with a suitable error message.

== Cryptographic Data Files ==

All other file formats begin with two lines. The first contains the file
name, including the generated host name and filestamp. The second
contains the datestamp in conventional Unix date format. Lines beginning
with # are considered comments and ignored by the `ntp-keygen` program
and {ntpdman} daemon. Cryptographic values are encoded first
using ASN.1 rules, then encrypted if necessary, and finally written
PEM-encoded printable ASCII format preceded and followed by MIME content
identifier lines.

The format of the symmetric keys file is somewhat different than the
other files in the interest of backward compatibility. Since DES-CBC is
deprecated in NTPv4, the only key format of interest is MD5 alphanumeric
strings. Following hte heard the keys are entered one per line in the
format _keyno_ _type_ _key_ where _keyno_ is a positive integer in the
range 1-65,535, _type_ is the string MD5 defining the key format and
_key_ is the key itself, which is a printable ASCII string 16 characters
or less in length. Each character is chosen from the 93 printable
characters in the range 0x21 through 0x7f excluding space and the ‘#’
character.

Note that the keys used by the {ntpqman} program are checked
against passwords requested by the programs and entered by hand, so it
is generally appropriate to specify these keys in human readable ASCII
format.

The `ntp-keygen` program generates a MD5 symmetric keys file
_ntpkey_MD5key_hostname.filestamp_. Since the file contains private
shared keys, it should be visible only to root and distributed by secure
means to other subnet hosts. The NTP daemon loads the file _ntp.keys_,
so `ntp-keygen` installs a soft link from this name to the generated
file. Subsequently, similar soft links must be installed by manual or
automated means on the other subnet hosts. While this file is not used
with the Autokey Version 2 protocol, it is needed to authenticate some
remote configuration commands used by the {ntpqman} utilitiy.

== OPTIONS ==

`-b` imbits, `--imbits`=_imbits_::
  identity modulus bits. This option takes an integer number as its
  argument. The value of _imbits_ is constrained to being:
+
------------------------------

in the range  256 through 2048
------------------------------
+
The number of bits in the identity modulus. The default is 256.

`-c` scheme, `--certificate`=_scheme_::
  certificate scheme.
  +
scheme is one of RSA-MD2, RSA-MD5, RSA-SHA, RSA-SHA1, RSA-MDC2,
RSA-RIPEMD160, DSA-SHA, or DSA-SHA1.
+
Select the certificate message digest/signature encryption scheme.
Note that RSA schemes must be used with a RSA sign key and DSA schemes
must be used with a DSA sign key. The default without this option is
RSA-MD5.

`-C` cipher, `--cipher`=_cipher_::
  privatekey cipher.
+
Select the cipher which is used to encrypt the files containing
private keys. The default is three-key triple DES in CBC mode,
equivalent to "@code\{-C des-ede3-cbc". The openssl tool lists ciphers
available in "`openssl -h`" output.

`-d`, `--debug-level`::
  Increase debug verbosity level. This option may appear an unlimited
  number of times.

`-D` number, `--set-debug-level`=_number_::
  Set the debug verbosity level. This option may appear an unlimited
  number of times. This option takes an integer number as its argument.

`-e`, `--id-key`::
  Write IFF or GQ identity keys.
+
Write the IFF or GQ client keys to the standard output. This is
intended for automatic key distribution by mail.

`-G`, `--gq-params`::
  Generate GQ parameters and keys.
+
Generate parameters and keys for the GQ identification scheme,
obsoleting any that may exist.

`-H`, `--host-key`::
  generate RSA host key.
+
Generate new host keys, obsoleting any that may exist.

`-I`, `--iffkey`::
  generate IFF parameters.
+
Generate parameters for the IFF identification scheme, obsoleting any
that may exist.

`-i` group, `--ident`=_group_::
  set Autokey group name.
+
Set the optional Autokey group name to name. This is used in the file
name of IFF, GQ, and MV client parameters files. In that role, the
default is the host name if this option is not provided. The group
name, if specified using `-i/--ident` or using `-s/--subject-name`
following an '_@_' character, is also a part of the self-signed host
certificate's subject and issuer names in the form host@group and
should match the '_crypto ident_' or '_server ident_' configuration in
_ntpd_'s configuration file.

`-l` lifetime, `--lifetime`=_lifetime_::
  set certificate lifetime. This option takes an integer number as its
  argument.
+
Set the certificate expiration to lifetime days from now.

`-M`, `--md5key`::
  generate MD5 keys.
+
Generate MD5 keys, obsoleting any that may exist.

`-m` modulus, `--modulus`=_modulus_::
  modulus. This option takes an integer number as its argument. The
  value of _modulus_ is constrained to being:
+
------------------------------

in the range  256 through 2048
------------------------------
+
The number of bits in the prime modulus. The default is 512.

`-P`, `--pvt-cert`::
  generate PC private certificate.
+
Generate a private certificate. By default, the program generates
public certificates.
`-p` passwd, `--password`=_passwd_::
local private password.
+
Local files containing private data are encrypted with the DES-CBC
algorithm and the specified password. The same password must be
specified to the local ntpd via the "crypto pw password" configuration
command. The default password is the local hostname.

`-q` passwd, `--export-passwd`=_passwd_::
  export IFF or GQ group keys with password.
+
Export IFF or GQ identity group keys to the standard output, encrypted
with the DES-CBC algorithm and the specified password. The same
password must be specified to the remote ntpd via the "crypto pw
password" configuration command. See also the option --id-key (-e) for
unencrypted exports.

`-S` sign, `--sign-key`=_sign_::
  generate sign key (RSA or DSA).
+
Generate a new sign key of the designated type, obsoleting any that
may exist. By default, the program uses the host key as the sign key.

`-s` host@group, `--subject-name`=host@group::
  set host and optionally group name.
+
Set the Autokey host name, and optionally, group name specified
following an '_@_' character. The host name is used in the file name
of generated host and signing certificates, without the group name.
The host name, and if provided, group name are used in host@group form
for the host certificate's subject and issuer fields. Specifying
'`-s @group`' is allowed, and results in leaving the host name
unchanged while appending _@group_ to the subject and issuer fields,
as with `-i group`. The group name, or if not provided, the host name
are also used in the file names of IFF, GQ, and MV client parameter
files.

`-T`, `--trusted-cert`::
  trusted certificate (TC scheme).
+
Generate a trusted certificate. By default, the program generates a
non-trusted certificate.

`-V` num, `--mv-params`=_num_::
  generate <num> MV parameters. This option takes an integer number as
  its argument.
+
Generate parameters and keys for the Mu-Varadharajan (MV)
identification scheme.

`-v` num, `--mv-keys`=_num_::
  update <num> MV keys. This option takes an integer number as its
  argument.
+
This option has not been fully documented.

== USAGE ==

The `-p` password option specifies the write password and `-q` password
option the read password for previously encrypted files. The
`ntp-keygen` program prompts for the password if it reads an encrypted
file and the password is missing or incorrect. If an encrypted file is
read successfully and no write password is specified, the read password
is used as the write password by default.

== EXIT STATUS ==

One of the following exit values will be returned:

0 (EXIT_SUCCESS)::
  Successful program execution.
1 (EXIT_FAILURE)::
  The operation failed or the command syntax was not valid.


== AUTHORS ==

The University of Delaware and Network Time Foundation

== COPYRIGHT ==

//FIXME: NTF reference
Copyright (C) 1992-2015 The University of Delaware and Network Time
Foundation all rights reserved. This program is released under the terms
of the NTP license, <http://ntp.org/license>.

== BUGS ==

It can take quite a while to generate some cryptographic values, from
one to several minutes with modern architectures such as UltraSPARC and
up to tens of minutes to an hour with older architectures such as SPARC
IPC.

//FIXME: ntp.org reference
Please report bugs to http://bugs.ntp.org .

Please send bug reports to: http://bugs.ntp.org, bugs@ntp.org

== NOTES ==

Portions of this document came from FreeBSD.

// end

