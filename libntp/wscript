def configure(ctx):
	ctx.check_cc(header_name="semaphore.h", mandatory=False)

	# Check for directory separator
	if ctx.env.TARGET_PLATFORM == "win":
		sep = "\\"
	else:
		sep = "/"
	ctx.define("DIR_SEP", "'%s'" % sep, quote=False)


def build(ctx):
	srcnode = ctx.srcnode.abspath()

	libntp_source = [
		"a_md5encrypt.c",
		"atoint.c",
		"atolfp.c",
		"atouint.c",
		"authkeys.c",
		"authreadkeys.c",
		"authusekey.c",
		"buftvtots.c",
		"caljulian.c",
		"caltontp.c",
		"calyearstart.c",
		"clocktime.c",
		"clocktypes.c",
		"decodenetnum.c",
		"dofptoa.c",
		"dolfptoa.c",
		"emalloc.c",
		"getopt.c",
		"hextoint.c",
		"hextolfp.c",
		"humandate.c",
		"icom.c",
		"intercept.c",
		"iosignal.c",
		"lib_strbuf.c",
		"machines.c",
		"mktime.c",
		"modetoa.c",
		"mstolfp.c",
		"msyslog.c",
		"netof.c",
		"ntp_calendar.c",
		"ntp_crypto_rnd.c",
		"ntp_intres.c",
		"ntp_lineedit.c",
		"ntp_random.c",
		"ntp_rfc2553.c",
		"ntp_worker.c",
		"numtoa.c",
		"numtohost.c",
		"octtoint.c",
		"prettydate.c",
		"recvbuff.c",
		"refnumtoa.c",
		"socket.c",
		"socktoa.c",
		"socktohost.c",
		"ssl_init.c",
		"statestr.c",
		"strl_obsd.c",
		"syssignal.c",
		"timetoa.c",
		"timevalops.c",
		"uglydate.c",
		"vint64ops.c",
		"work_thread.c",
		"ymd2yd.c",
	]

	if ctx.env.REFCLOCK_CHU == True \
		or ctx.env.REFCLOCK_IRIG == True \
		or ctx.env.REFCLOCK_WWV == True:

		libntp_source += [
			"audio.c"
		]


	source_libntpsim = [
		"systime_s.c"
	]


	libntp_source_systime = [
		"systime.c"
	]

	ctx(
		target		= "ntp",
		features	= "c cstlib bld_include src_include",
		source		= libntp_source + libntp_source_systime,
		includes	= [
						"%s/lib/isc/include/" % srcnode,
						"%s/lib/isc/unix/include/" % srcnode, # XXX: platform: requires unix/win32 switch.
					],

	)
