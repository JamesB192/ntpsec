import sys

def build(ctx):
	srcnode = ctx.srcnode.abspath()

	libntp_source = [
		"a_md5encrypt.c",
		"atolfp.c",
		"authkeys.c",
		"authreadkeys.c",
		"authusekey.c",
#		"calyearstart.c",
		"clocktime.c",
		"decodenetnum.c",
		"dofptoa.c",
		"dolfptoa.c",
		"emalloc.c",
		"getopt.c",
		"hextolfp.c",
		"humandate.c",
		"initnetwork.c",
		"lib_strbuf.c",
		"machines.c",
		"modetoa.c",
		"mstolfp.c",
		"msyslog.c",
		"netof.c",
		"ntp_calendar.c",
		"ntp_endian.c",
		"ntp_intres.c",
		"ntp_lineedit.c",
		"ntp_random.c",
		"ntp_worker.c",
		"numtoa.c",
		"numtohost.c",
		"prettydate.c",
		"recvbuff.c",
		"refidsmear.c",
		"socket.c",
		"socktoa.c",
		"socktohost.c",
		"ssl_init.c",
		"strl_obsd.c",
		"syssignal.c",
		"timetoa.c",
		"vint64ops.c",
		"work_thread.c",
		"ymd2yd.c",
	]

	libntp_source_sharable = [
		"lib_strbuf.c",
		"statestr.c",
	]

	libntp_source_systime = [
		"systime.c"
	]

	includes = [
		"%s/libisc/include/" % srcnode,
		"%s/libisc/unix/include/" % srcnode, # XXX: platform: requires unix/win32 switch.
		"%s/libsodium/include/" % srcnode,
	]

	# C library
	ctx(
		target		= "ntp",
		features	= "c cstlib bld_include src_include",
		use		= "sodium",
		source		= libntp_source + libntp_source_sharable + libntp_source_systime,
		includes	= includes,
	)

	pyversion = ".".join([str(x) for x in sys.version_info[:2]])

	# Loadable Python extension
	ctx(
		target		= "ntpc",
		features	= "c cshlib bld_include src_include",
		source		= ["pymodule.c"] + libntp_source_sharable,
		includes	= includes + ["/usr/include/python" + pyversion],
	)
