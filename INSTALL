= Installation instructions =

== Quick Start ==

This software should build on any operating system conformant to
POSIX.1-2001 and ISO/IEC 9899:1999 (C99).  The primary development
platforms are Linux and FreeBSD.

There are some prerequisites.  Libraries need both the library and the
development headers installed.

Python >= 2.5::
   Required.

libevent 2.x::
   Required. Your package manager might call this "libevent-dev".

OpenSSL::
   Optional; enables encryption and authentication. Your package manager
   may call this openssl-devel or libssl-dev.

GNU readline::
   Optional. Enhances ntpq's interactive mode by enabling line
   editing. Your package manager may call this libreadline-dev.

BSD libedit::
   Optional. Enhances ntpq's interactive mode by enabling line
   editing. Used as a fallback if it is installed and GNU readline
   is not.

sys/timepps.h::
   If you are building to supply Stratum 1 time service (that is, with
   refclocks linked in) you may find that you need the sys/timepps.h
   file to be installed, depending on which refclocks you enable. If
   you are using a package manager, the package 'pps-tools' may do.
   This won't be necessary for pure client (Stratum 2 or higher)
   installations.

Go to the directory where you found this file and do this:

----------------------------------------------------------------------
$ ./waf configure
$ ./waf build
----------------------------------------------------------------------

"waf" is a build engine written in Python that runs faster and is
far less painful to maintain than an equivalent autoconf build.
By count of lines, the waf build recipe is a factor of *35* smaller
than what it replaced.

== Basic Installation ==

These are generic Unix installation instructions.

Under Unix, the simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and

  2. Run `./waf configure' to configure the package for your system.
  You may want to add configuration options after the verb 'configure';
  see below.

  3. Type `./waf build' to compile the package.

  4. Type `./waf install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `./waf clean'.

  6. To also remove the files that `waf configure' created (so you can
     configure and compile the package for a different kind of
     computer), type `./waf distclean'.

== Bugs ==

The configuration system is a work in progress, and occasionally acts
up during builds on new platforms.  If you see the message
"Compilation check failed but include exists!" this means that an attempt
to compile a small test program using the include header mentioned on
the previous line failed, but waf configure then found that despite
this the header file exists on your system.

When this happens, it is likely that the header has prererquisites
on your system that waf configure doesn't know about - that is,
others headers always need to be included before it in C programs.

Please report this as a bug, along with your platform details.

== Installation Names ==

By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving waf the
option `--prefix=PATH'.

== Optional Features ==

The waf builder accepts `--enable-FEATURE' options to where FEATURE
indicates an optional part of the package.  Do `waf --help' for a list
of options.

== Operation Controls ==

The waf builder recognizes the following options to control how it
operates.

`--help'
     Print a summary of the options to `waf configure', and exit.

`--version'
     Print the version of waf used to generate the `configure'
     script, and exit.

// end

