= ntp.conf(5) =
:doctype: manpage

== NAME ==
{ntpconf} - Network Time Protocol (NTP) daemon configuration file format

== SYNOPSIS ==
/etc/{ntpconf}

== DESCRIPTION ==

The `{ntpconf}` configuration file is read at initial startup by the
{ntpdman} daemon in order to specify the synchronization
sources, modes and other related information. Usually, it is installed
in the `/etc` directory, but could be installed elsewhere (see the
daemon's `-c` command line option).

The file format is similar to other UNIX configuration files. Comments
begin with a ‘#’ character and extend to the end of the line; blank
lines are ignored. Configuration commands consist of an initial keyword
followed by a list of arguments, some of which may be optional,
separated by whitespace. Commands may not be continued over multiple
lines. Arguments may be host names, host addresses written in numeric,
dotted-quad form, integers, floating point numbers (when specifying
times in seconds) and text strings.

The rest of this page describes the configuration and control options.
The "Notes on Configuring NTP and Setting up an NTP Subnet" page
(available as part of the HTML documentation provided under
`/usr/share/doc/{ntp}) contains an extended discussion of these options.
In addition to the discussion of general 'Configuration Options',
there are sections describing the following supported functionality and
the options used to control it:

* Authentication Support
* Monitoring Support
* Access Control Support
* Automatic NTP Configuration Options
* Reference Clock Support
* Miscellaneous Options

Following these is a section describing 'Miscellaneous Options'.
While there is a rich set of options available, the only required
option is one or more `pool`, `server`, `peer`, `broadcast` or
`manycastclient` commands.

== Configuration Support ==

Following is a description of the configuration commands in
NTPv4. There are two classes of commands, association commands that
configure a persistent association with a remote server or peer or
reference clock, and auxiliary commands that specify environmental
variables that control various related operations.

=== Association Commands ===

The various modes are determined by the command keyword and the type of
the required IP address. Addresses are classed by type as (s) a remote
server or peer (IPv4 class A, B and C), (b) the broadcast address of a
local interface, (m) a multicast address (IPv4 class D), or (r) a
reference clock address (127.127.x.x). For type m addresses the
IANA has assigned the multicast group address IPv4 224.0.1.1 and IPv6
ff05::101 (site local) exclusively to NTP, but other nonconflicting
addresses can be used.

Note that only those options applicable to each command are listed
below. Use of options not listed may not be caught as an error, but
may result in some weird and even destructive behavior.

If the Basic Socket Interface Extensions for IPv6 (RFC-2553) is
detected, support for the IPv6 address family is generated in addition
to the default support of the IPv4 address family. In a few cases,
including the reslist billboard generated by {ntpq}, IPv6 addresses are
automatically generated. IPv6 addresses can be identified by the
presence of colons ":" in the address field. IPv6 addresses can
be used almost everywhere where IPv4 addresses can be used, with the
exception of reference clock addresses, which are always IPv4.

Note that in contexts where a host name is expected, a `-4`or `--ipv4`
qualifier preceding the host name forces DNS resolution to the IPv4
namespace, while a `-6` or `--ipv6' qualifier forces DNS resolution to
the IPv6 namespace. See IPv6 references for the equivalent classes for
that address family.

include::../docs/assoc-commands.txt[]

=== Association Options ===

include::../docs/assoc-options.txt[]

=== Association Auxiliary Commands ===

include::../docs/assoc-auxcommands.txt[]

== Authentication Commands ==

include::../docs/auth-commands.txt[]

== Monitoring Support ==

{ntpdman} includes a comprehensive monitoring facility suitable
for continuous, long term recording of server and client timekeeping
performance. See thestatisticscommand below for a listing and example of
each type of statistics currently supported. Statistic files are managed
using file generation sets and scripts in the ./scripts directory of this
distribution. Using these facilities and UNIX cron(8) jobs, the data
can be automatically summarized and archived for retrospective
analysis.

=== Monitoring Commands ===

include::../docs/mon-commands.txt[]

== Access Control Support ==

The {ntpdman} daemon implements a general purpose address/mask
based restriction list. The list contains address/match entries sorted
first by increasing address values and and then by increasing mask
values. A match occurs when the bitwise AND of the mask and the packet
source address is equal to the bitwise AND of the mask and address in
the list. The list is searched in order with the last match found
defining the restriction flags associated with the entry. Additional
information and examples can be found in the "Notes on Configuring NTP
and Setting up a NTP Subnet" page (available as part of the HTML
documentation provided in `/usr/share/doc/{ntp}`_).

The restriction facility was implemented in conformance with the access
policies for the original NSFnet backbone time servers. Later the
facility was expanded to deflect cryptographic and clogging attacks.
While this facility may be useful for keeping unwanted or broken or
malicious clients from congesting innocent servers, it should not be
considered an alternative to the NTP authentication facilities. Source
address based restrictions are easily circumvented by a determined
cracker.

Clients can be denied service because they are explicitly included in
the restrict list created by the restrict command or implicitly as the
result of cryptographic or rate limit violations. Cryptographic
violations include certificate or identity verification failure; rate
limit violations generally result from defective NTP implementations
that send packets at abusive rates. Some violations cause denied service
only for the offending packet, others cause denied service for a timed
period and others cause the denied service for an indefinate period.
When a client or network is denied access for an indefinate period, the
only way at present to remove the restrictions is by restarting the
server.

=== The Kiss-of-Death Packet ===

Ordinarily, packets denied service are simply dropped with no further
action except incrementing statistics counters. Sometimes a more
proactive response is needed, such as a server message that explicitly
requests the client to stop sending and leave a message for the system
operator. A special packet format has been created for this purpose
called the "kiss-of-death" (KoD) packet. KoD packets have the leap bits
set unsynchronized and stratum set to zero and the reference identifier
field set to a four-byte ASCII code. If the `noserve` or `notrust` flag
of the matching restrict list entry is set, the code is "DENY"; if the
`limited` flag is set and the rate limit is exceeded, the code is
"RATE". Finally, if a cryptographic violation occurs, the code is
"CRYP".

A client receiving a KoD performs a set of sanity checks to minimize
security exposure, then updates the stratum and reference identifier
peer variables, sets the access denied (BOGON4) bit in the peer flash
variable and sends a message to the log. As long as the BOGON4 bit is
set, the client will send no further packets to the server. The only way
at present to recover from this condition is to restart the protocol at
both the client and server. This happens automatically at the client
when the association times out. It will happen at the server only if the
server operator cooperates.

== Access Control Commands ==

`discard` [`average` _avg_] [`minimum` _min_] [`monitor` _prob_]::
  Set the parameters of the `limited` facility which protects the server
  from client abuse. The `average` subcommand specifies the minimum
  average packet spacing, while the `minimum` subcommand specifies the
  minimum packet spacing. Packets that violate these minima are
  discarded and a kiss-o'-death packet returned if enabled. The default
  minimum average and minimum are 5 and 2, respectively. The monitor
  subcommand specifies the probability of discard for packets that
  overflow the rate-control window.

`restrict` _address_ [`mask` _mask_] [`flag` `...`]::
  The _address_ argument expressed in dotted-quad form is the address of
  a host or network. Alternatively, the _address_ argument can be a
  valid host DNS name. The _mask_ argument expressed in dotted-quad form
  defaults to `255.255.255.255`, meaning that the _address_ is treated
  as the address of an individual host. A default entry (address
  `0.0.0.0`, mask `0.0.0.0`) is always included and is always the first
  entry in the list. Note that text string _default_, with no mask
  option, may be used to indicate the default entry. In the current
  implementation, _flag_ always restricts access, i.e., an entry with no
  flags indicates that free access to the server is to be given. The
  flags are not orthogonal, in that more restrictive flags will often
  make less restrictive ones redundant. The flags can generally be
  classed into two categories, those which restrict time service and
  those which restrict informational queries and attempts to do run-time
  reconfiguration of the server. One or more of the following flags may
  be specified:
+
--
  `ignore`;;
    Deny packets of all kinds, including {ntpqman} queries.
  `kod`;;
    If this flag is set when an access violation occurs, a kiss-o'-death
    (KoD) packet is sent. KoD packets are rate limited to no more than
    one per second. If another KoD packet occurs within one second after
    the last one, the packet is dropped.
  `limited`;;
    Deny service if the packet spacing violates the lower limits
    specified in the discard command. A history of clients is kept using
    the monitoring capability of {ntpdman}. Thus, monitoring is
    always active as long as there is a restriction entry with
    the limited flag.
  `lowpriotrap`;;
    Declare traps set by matching hosts to be low priority. The number
    of traps a server can maintain is limited (the current limit is 3).
    Traps are usually assigned on a first come, first served basis, with
    later trap requestors being denied service. This flag modifies the
    assignment algorithm by allowing low priority traps to be overridden
    by later requests for normal priority traps.
  `nomodify`;;
    Deny {ntpqman} queries which attempt
    to modify the state of the server (i.e., run time reconfiguration).
    Queries which return information are permitted.
  `noquery`;;
    Deny {ntpqman} queries. Time service is not affected.
  `nopeer`;;
    Deny packets which would result in mobilizing a new association.
    This includes broadcast and symmetric active packets when a
    configured association does not exist. It also includes _pool_
    associations, so if you want to use servers from a `pool` directive
    and also want to use `nopeer` by default, you'll want a `restrict
    source ...` line as well that does
  `not`;;
    include the `nopeer` directive.
  `noserve`;;
    Deny all packets except {ntpqman} and queries.
  `notrap`;;
    Decline to provide mode 6 control message trap service to matching
    hosts. The trap service is a subsystem of the {ntpq} control message
    protocol which is intended for use by remote event logging programs.
  `notrust`;;
    Deny service unless the packet is cryptographically authenticated.
  `ntpport`;;
    This is actually a match algorithm modifier, rather than a
    restriction flag. Its presence causes the restriction entry to be
    matched only if the source port in the packet is the standard NTP
    UDP port (123). Both `ntpport` and `non-ntpport` may be specified.
    The `ntpport` is considered more specific and is sorted later in the
    list.
  `version`;;
    Deny packets that do not match the current NTP version.
--
+
Default restriction list entries with the flags ignore, interface,
ntpport, for each of the local host's interface addresses are inserted
into the table at startup to prevent the server from attempting to
synchronize to its own time. A default entry is also always present,
though if it is otherwise unconfigured; no flags are associated with
the default entry (i.e., everything besides your own NTP server is
unrestricted).

== Automatic NTP Configuration Options ==

=== Manycasting ===

Manycasting is a automatic discovery and configuration paradigm new to
NTPv4. It is intended as a means for a multicast client to troll the
nearby network neighborhood to find cooperating manycast servers,
validate them using cryptographic means and evaluate their time values
with respect to other servers that might be lurking in the vicinity. The
intended result is that each manycast client mobilizes client
associations with some number of the "best" of the nearby manycast
servers, yet automatically reconfigures to sustain this number of
servers should one or another fail.

Note that the manycasting paradigm does not coincide with the anycast
paradigm described in RFC-1546, which is designed to find a single
server from a clique of servers providing the same service. The manycast
paradigm is designed to find a plurality of redundant servers satisfying
defined optimality criteria.

Manycasting can be used with either symmetric key or public key
cryptography. The public key infrastructure (PKI) offers the best
protection against compromised keys and is generally considered
stronger, at least with relatively large key sizes. It is implemented
using the Autokey protocol and the OpenSSL cryptographic library
available from _http://www.openssl.org/_. The library can also be used
with other NTPv4 modes as well and is highly recommended, especially for
broadcast modes.

A persistent manycast client association is configured using the
manycastclient command, which is similar to the server command but with
a multicast (IPv4 class _D_ or IPv6 prefix _FF_) group address. The IANA
has designated IPv4 address 224.1.1.1 and IPv6 address FF05::101 (site
local) for NTP. When more servers are needed, it broadcasts manycast
client messages to this address at the minimum feasible rate and minimum
feasible time-to-live (TTL) hops, depending on how many servers have
already been found. There can be as many manycast client associations as
different group address, each one serving as a template for a future
ephemeral unicast client/server association.

Manycast servers configured with the _manycastserver_ command listen on
the specified group address for manycast client messages. Note the
distinction between manycast client, which actively broadcasts messages,
and manycast server, which passively responds to them. If a manycast
server is in scope of the current TTL and is itself synchronized to a
valid source and operating at a stratum level equal to or lower than the
manycast client, it replies to the manycast client message with an
ordinary unicast server message.

The manycast client receiving this message mobilizes an ephemeral
client/server association according to the matching manycast client
template, but only if cryptographically authenticated and the server
stratum is less than or equal to the client stratum. Authentication is
explicitly required and either symmetric key or public key (Autokey) can
be used. Then, the client polls the server at its unicast address in
burst mode in order to reliably set the host clock and validate the
source. This normally results in a volley of eight client/server at 2-s
intervals during which both the synchronization and cryptographic
protocols run concurrently. Following the volley, the client runs the
NTP intersection and clustering algorithms, which act to discard all but
the "best" associations according to stratum and synchronization
distance. The surviving associations then continue in ordinary
client/server mode.

The manycast client polling strategy is designed to reduce as much as
possible the volume of manycast client messages and the effects of
implosion due to near-simultaneous arrival of manycast server messages.
The strategy is determined by the _manycastclient_, _tos_ and _ttl_
configuration commands. The manycast poll interval is normally eight
times the system poll interval, which starts out at the _minpoll_ value
specified in the _manycastclient_, command and, under normal
circumstances, increments to the _maxpolll_ value specified in this
command. Initially, the TTL is set at the minimum hops specified by the
ttl command. At each retransmission the TTL is increased until reaching
the maximum hops specified by this command or a sufficient number of client
associations have been found. Further retransmissions use the same TTL.

The quality and reliability of the suite of associations discovered by
the manycast client is determined by the NTP mitigation algorithms and
the _minclock_ and _minsane_ values specified in the `tos` configuration
command. At least _minsane_ candidate servers must be available and the
mitigation algorithms produce at least _minclock_ survivors in order to
synchronize the clock. Byzantine agreement principles require at least
four candidates in order to correctly discard a single falseticker. For
legacy purposes, _minsane_ defaults to 1 and _minclock_ defaults to 3.
For manycast service _minsane_ should be explicitly set to 4, assuming
at least that number of servers are available.

If at least _minclock_ servers are found, the manycast poll interval is
immediately set to eight times _maxpoll_. If less than _minclock_
servers are found when the TTL has reached the maximum hops, the
manycast poll interval is doubled. For each transmission after that, the
poll interval is doubled again until reaching the maximum of eight times
_maxpoll_. Further transmissions use the same poll interval and TTL
values. Note that while all this is going on, each client/server
association found is operating normally at the system poll interval.

Administratively scoped multicast boundaries are normally specified by
the network router configuration and, in the case of IPv6, the link/site
scope prefix. By default, the increment for TTL hops is 32 starting from
31; however, the _ttl_ configuration command can be used to modify the
values to match the scope rules.

It is often useful to narrow the range of acceptable servers which can
be found by manycast client associations. Because manycast servers
respond only when the client stratum is equal to or greater than the
server stratum, primary (stratum 1) servers will find only primary
servers in TTL range, which is probably the most common objective.
However, unless configured otherwise, all manycast clients in TTL range
will eventually find all primary servers in TTL range, which is probably
not the most common objective in large networks. The `tos` command can
be used to modify this behavior. Servers with stratum below _floor_ or
above _ceiling_ specified in the `tos` command are strongly discouraged
during the selection process; however, these servers may be temporally
accepted if the number of servers within TTL range is less than
_minclock_.

The above actions occur for each manycast client message, which repeats
at the designated poll interval. However, once the ephemeral client
association is mobilized, subsequent manycast server replies are
discarded, since that would result in a duplicate association. If during
a poll interval the number of client associations falls below
_minclock_, all manycast client prototype associations are reset to the
initial poll interval and TTL hops and operation resumes from the
beginning. It is important to avoid frequent manycast client messages,
since each one requires all manycast servers in TTL range to respond.
The result could well be an implosion, either minor or major, depending
on the number of servers in range. The recommended value for _maxpoll_
is 12 (4,096 s).

It is possible and frequently useful to configure a host as both
manycast client and manycast server. A number of hosts configured this
way and sharing a common group address will automatically organize
themselves in an optimum configuration based on stratum and
synchronization distance. For example, consider an NTP subnet of two
primary servers and a hundred or more dependent clients. With two
exceptions, all servers and clients have identical configuration files
including both `multicastclient` and `multicastserver` commands using,
for instance, multicast group address 239.1.1.1. The only exception is
that each primary server configuration file must include commands for
the primary reference source such as a GPS receiver.

The remaining configuration files for all secondary servers and clients
have the same contents, except for the `tos` command, which is specific
for each stratum level. For stratum 1 and stratum 2 servers, that
command is not necessary. For stratum 3 and above servers the _floor_
value is set to the intended stratum number. Thus, all stratum 3
configuration files are identical, all stratum 4 files are identical and
so forth.

Once operations have stabilized in this scenario, the primary servers
will find the primary reference source and each other, since they both
operate at the same stratum (1), but not with any secondary server or
client, since these operate at a higher stratum. The secondary servers
will find the servers at the same stratum level. If one of the primary
servers loses its GPS receiver, it will continue to operate as a client
and other clients will time out the corresponding association and
re-associate accordingly.

Some administrators prefer to avoid running
{ntpdman} continuously and run either {ntpdate} or
{ntpdman} `-q` as a cron job. In either case the servers must be
configured in advance and the program fails if none are available when
the cron job runs. A really slick application of manycast is with
{ntpd} `-q`. The program wakes up, scans the local landscape
looking for the usual suspects, selects the best from among the rascals,
sets the clock and then departs. Servers do not have to be configured in
advance and all clients throughout the network can have the same
configuration file.

=== Manycast Interactions with Autokey ===

Each time a manycast client sends a client mode packet to a multicast
group address, all manycast servers in scope generate a reply including
the host name and status word. The manycast clients then run the Autokey
protocol, which collects and verifies all certificates involved.
Following the burst interval all but three survivors are cast off, but
the certificates remain in the local cache. It often happens that
several complete signing trails from the client to the primary servers
are collected in this way.

About once an hour or less often if the poll interval exceeds this, the
client regenerates the Autokey key list. This is in general transparent
in client/server mode. However, about once per day the server private
value used to generate cookies is refreshed along with all manycast
client associations. In this case all cryptographic values including
certificates is refreshed. If a new certificate has been generated since
the last refresh epoch, it will automatically revoke all prior
certificates that happen to be in the certificate cache. At the same
time, the manycast scheme starts all over from the beginning and the
expanding ring shrinks to the minimum and increments from there while
collecting all servers in scope.

=== Manycast Options ===

`tos` [`ceiling` _ceiling_ | `cohort` \{ `0` | `1` } | `floor` _floor_ | `minclock` _minclock_ | `minsane` _minsane_]::
  This command affects the clock selection and clustering algorithms. It
  can be used to select the quality and quantity of peers used to
  synchronize the system clock and is most useful in manycast mode. The
  variables operate as follows:

  `ceiling` _ceiling_;;
    Peers with strata above _ceiling_ will be discarded if there are at
    least _minclock_ peers remaining. This value defaults to 15, but can
    be changed to any number from 1 to 15.
  `cohort` \{0 | 1 };;
    This is a binary flag which enables (0) or disables (1) manycast
    server replies to manycast clients with the same stratum level. This
    is useful to reduce implosions where large numbers of clients with
    the same stratum level are present. The default is to enable these
    replies.
  `floor` _floor_;;
    Peers with strata below _floor_ will be discarded if there are at
    least _minclock_ peers remaining. This value defaults to 1, but can
    be changed to any number from 1 to 15.
  `minclock` _minclock_;;
    The clustering algorithm repeatedly casts out outlyer associations
    until no more than _minclock_ associations remain. This value
    defaults to 3, but can be changed to any number from 1 to the number
    of configured sources.
  `minsane` _minsane_;;
    This is the minimum number of candidates available to the clock
    selection algorithm in order to produce one or more truechimers for
    the clustering algorithm. If fewer than this number are available,
    the clock is undisciplined and allowed to run free. The default is 1
    for legacy purposes. However, according to principles of Byzantine
    agreement, _minsane_ should be at least 4 in order to detect and
    discard a single falseticker.
`ttl` _hop_ `...`::
  This command specifies a list of TTL values in increasing order, up to
  8 values can be specified. In manycast mode these values are used in
  turn in an expanding-ring search. The default is eight multiples of 32
  starting at 31.

== Reference Clock Support ==

The NTP daemon supports some two dozen different radio,
satellite and modem reference clocks plus a special pseudo-clock used
for backup or when no other clock source is available. Detailed
descriptions of individual device drivers and options can be found in
the "Reference Clock Drivers" page (available as part of the HTML
documentation provided in `/usr/share/doc/{ntp}`). Additional information
can be found in the pages linked there, including the "Debugging Hints
for Reference Clock Drivers" and "How To Write a Reference Clock Driver"
pages (available as part of the HTML documentation provided in
`/usr/share/doc/{ntp}`). In addition, support for a PPS signal is
available as described in the "Pulse-per-second (PPS) Signal
Interfacing" page (available as part of the HTML documentation provided
in `/usr/share/doc/{ntp}`). Many drivers support special line
discipline/streams modules which can significantly improve the accuracy
using the driver. These are described in the "Line Disciplines and
Streams Drivers" page (available as part of the HTML documentation
provided in `/usr/share/doc/{ntp}`).

A reference clock will generally (though not always) be a radio timecode
receiver which is synchronized to a source of standard time such as the
services offered by the NRC in Canada and NIST and USNO in the US. The
interface between the computer and the timecode receiver is device
dependent, but is usually a serial port. A device driver specific to
each reference clock must be selected and compiled in the distribution;
however, most common radio, satellite and modem clocks are included by
default. Note that an attempt to configure a reference clock when the
driver has not been compiled or the hardware port has not been
appropriately configured results in a scalding remark to the system log
file, but is otherwise non hazardous.

For the purposes of configuration, {ntpdman} treats reference
clocks in a manner analogous to normal NTP peers as much as possible.
Reference clocks are identified by a syntactically correct but invalid
IP address, in order to distinguish them from normal NTP peers.
Reference clock addresses are of the form 127.127.t_._u_, where _t_ is
an integer denoting the clock type and _u_ indicates the unit number.
While it may seem overkill, it is in fact sometimes
useful to configure multiple reference clocks of the same type, in which
case the unit numbers must be unique.

The `server` command is used to configure a reference clock, where the
_address_ argument in that command is the clock address. The `key`,
`version` and `ttl` options are not used for reference clock support.
The `mode` option is added for reference clock support, as described
below. The `prefer` option can be useful to persuade the server to
cherish a reference clock with somewhat more enthusiasm than other
reference clocks or peers. Further information on this option can be
found in the "Mitigation Rules and the prefer Keyword" (available as
part of the HTML documentation provided in `/usr/share/doc/{ntp}`) page.
The `minpoll` and `maxpoll` options have meaning only for selected clock
drivers. See the individual clock driver document pages for additional
information.

The `fudge` command is used to provide additional information for
individual clock drivers and normally follows immediately after the
`server` command. The `address` argument specifies the clock address.
The `refid` and `stratum` options can be used to override the defaults
for the device. There are two optional device-dependent time offsets and
four flags that can be included in the `fudge` command as well.

The stratum number of a reference clock is by default zero. Since the
{ntpdman} daemon adds one to the stratum of each peer, a primary
server ordinarily displays an external stratum of one. In order to
provide engineered backups, it is often useful to specify the reference
clock stratum as greater than zero. The stratum option is used for this
purpose. Also, in cases involving both a reference clock and a
pulse-per-second (PPS) discipline signal, it is useful to specify the
reference clock identifier as other than the default, depending on the
driver. The refid option is used for this purpose. Except where noted,
these options apply to all clock drivers.

== Reference Clock Commands

`server` _127.127.t_._u_ [`prefer`] [`mode` _int_] [`minpoll` _int_]
[`maxpoll` _int_]::
  This command can be used to configure reference clocks in special
  ways. The options are interpreted as follows:

  `prefer`;;
    Marks the reference clock as preferred. All other things being
    equal, this host will be chosen for synchronization among a set of
    correctly operating hosts. See the "Mitigation Rules and the prefer
    Keyword" page (available as part of the HTML documentation provided
    in `/usr/share/doc/{ntp}`) for further information.
  `mode` _int_;;
    Specifies a mode number which is interpreted in a device-specific
    fashion. For instance, it selects a dialing protocol in the ACTS
    driver and a device subtype in the parse drivers.
  `minpoll` _int_; `maxpoll` _int_;;
    These options specify the minimum and maximum polling interval for
    reference clock messages, as a power of 2 in seconds For most
    directly connected reference clocks, both _minpoll_ and _maxpoll_
    default to 6 (64 s). For modem reference clocks, _minpoll_ defaults
    to 10 (17.1 m) and _maxpoll_ defaults to 14 (4.5 h). The allowable
    range is 4 (16 s) to 17 (36.4 h) inclusive.

`fudge` _127.127.t_._u_ [`time1` _sec_] [`time2` _sec_] [`stratum` _int_] [`refid` _string_] [`mode` _int_] [`flag1` `0` | `1`] [`flag2` `0` | `1`] [`flag3` `0` | `1`] [`flag4` `0` | `1`]::
  This command can be used to configure reference clocks in special
  ways. It must immediately follow the `server` command which configures
  the driver. Note that the same capability is possible at run time
  using the {ntpqman} program. The options are interpreted as
  follows:

  `time1` _sec_;;
    Specifies a constant to be added to the time offset produced by the
    driver, a fixed-point decimal number in seconds. This is used as a
    calibration constant to adjust the nominal time offset of a
    particular clock to agree with an external standard, such as a
    precision PPS signal. It also provides a way to correct a systematic
    error or bias due to serial port or operating system latencies,
    different cable lengths or receiver internal delay. The specified
    offset is in addition to the propagation delay provided by other
    means, such as internal DIPswitches. Where a calibration for an
    individual system and driver is available, an approximate correction
    is noted in the driver documentation pages. Note: in order to
    facilitate calibration when more than one radio clock or PPS signal
    is supported, a special calibration feature is available. It takes
    the form of an argument to the `enable` command described in
    "Miscellaneous` Options" page and operates as described in the
    "Reference Clock Drivers" page (available as part of the HTML
    documentation provided in `/usr/share/doc/{ntp}`).
//FIXME: page reference may be invalid
  `time2` _secs_;;
    Specifies a fixed-point decimal number in seconds, which is
    interpreted in a driver-dependent way. See the descriptions of
    specific drivers in the "Reference Clock Drivers" page (available as
    part of the HTML documentation provided in `/usr/share/doc/{ntp}`).
  `stratum` _int_;;
    Specifies the stratum number assigned to the driver, an integer
    between 0 and 15. This number overrides the default stratum number
    ordinarily assigned by the driver itself, usually zero.
  `refid` _string_;;
    Specifies an ASCII string of from one to four characters which
    defines the reference identifier used by the driver. This string
    overrides the default identifier ordinarily assigned by the driver
    itself.
  `mode` _int_;;
    Specifies a mode number which is interpreted in a device-specific
    fashion. For instance, it selects a dialing protocol in the ACTS
    driver and a device subtype in the parse drivers.
  `flag1` `0` | `1`; `flag2` `0` | `1`; `flag3` `0` | `1`; `flag4` `0` | `1`;;
    These four flags are used for customizing the clock driver. The
    interpretation of these values, and whether they are used at all, is
    a function of the particular clock driver. However, by convention
    `flag4` is used to enable recording monitoring data to the
    _clockstats_ file configured with the _filegen_ command. Further
    information on the _filegen_ command can be found in "Monitoring
    Options".

== Miscellaneous Options ==

`broadcastdelay` _seconds_::
  The broadcast and multicast modes require a special calibration to
  determine the network delay between the local and remote servers.
  Ordinarily, this is done automatically by the initial protocol
  exchanges between the client and server. In some cases, the
  calibration procedure may fail due to network or server access
  controls, for example. This command specifies the default delay to be
  used under these circumstances. Typically (for Ethernet), a number
  between 0.003 and 0.007 seconds is appropriate. The default when this
  command is not used is 0.004 seconds.

`calldelay` _delay_::
  This option controls the delay in seconds between the first and second
  packets sent in burst or iburst mode to allow additional time for a
  modem or ISDN call to complete.

`driftfile` _driftfile_::
  This command specifies the complete path and name of the file used to
  record the frequency of the local clock oscillator. This is the same
  operation as the `-f` command line option. If the file exists, it is
  read at startup in order to set the initial frequency and then updated
  once per hour with the current frequency computed by the daemon. If
  the file name is specified, but the file itself does not exist, the
  starts with an initial frequency of zero and creates the file when
  writing it for the first time. If this command is not given, the
  daemon will always start with an initial frequency of zero.
+
The file format consists of a single line containing a single floating
point number, which records the frequency offset measured in
parts-per-million (PPM). The file is updated by first writing the
current drift value into a temporary file and then renaming this file
to replace the old version. This implies that {ntpdman} must
have write permission for the directory the drift file is located in,
and that file system links, symbolic or otherwise, should be avoided.

`enable` [`auth` | `bclient` | `calibrate` | `kernel` | `monitor` | `ntp` | `stats`]; `disable` [`auth` | `bclient` | `calibrate` | `kernel` | `monitor` | `ntp` | `stats`]::
  Provides a way to enable or disable various server options. Flags not
  mentioned are unaffected. Note that all of these flags can be
  controlled remotely using the {ntpqman} utility program.

  `auth`;;
    Enables the server to synchronize with unconfigured peers only if
    the peer has been correctly authenticated using either public key or
    private key cryptography. The default for this flag is `enable`.
  `bclient`;;
    Enables the server to listen for a message from a broadcast or
    multicast server, as in the `multicastclient` command with default
    address. The default for this flag is `disable`.
  `calibrate`;;
    Enables the calibrate feature for reference clocks. The default for
    this flag is `disable`.
  `kernel`;;
    Enables the kernel time discipline, if available. The default for
    this flag is `enable` if support is available, otherwise `disable`.
  `monitor`;;
    Enables the monitoring facility. See the {ntpqman} program
    and the monlist command for further information. The default for this
    flag is `enable`.
  `ntp`;;
    Enables time and frequency discipline. In effect, this switch opens
    and closes the feedback loop, which is useful for testing. The
    default for this flag is `enable`.
  `stats`;;
    Enables the statistics facility. See the "Monitoring Options"
    section for further information. The default for this flag is
    `disable`.

`includefile` _includefile_::
  This command allows additional configuration commands to be included
  from a separate file. Include files may be nested to a depth of five;
  upon reaching the end of any include file, command processing resumes
  in the previous configuration file. This option is useful for sites
  that run {ntpdman} on multiple hosts, with (mostly) common
  options (e.g., a restriction list).

`logconfig` _configkeyword_::
  This command controls the amount and type of output written to the
  system _syslog(3)_ facility or the alternate log file. By
  default, all output is turned on. All _configkeyword_ keywords can be
  prefixed with ‘=’, ‘+’ and ‘-’, where ‘=’ sets the syslog(3) priority
  mask, ‘+’ adds and ‘-’ removes messages. syslog(3) messages can be
  controlled in four classes (clock,peer,sys and sync). Within these
  classes four types of messages can be controlled: informational
  messages (info), event messages (events), statistics messages
  (statistics) and status messages (status).
+
Configuration keywords are formed by concatenating the message class
with the event class. The _all_ prefix can be used instead of a
message class. A message class may also be followed by the _all_
keyword to enable/disable all messages of the respective message
class. Thus, a minimal log configuration could look like this:
+
--------------------------------
logconfig =syncstatus +sysevents
--------------------------------
+
This would just list the synchronizations state of
{ntpdman} and the major system events. For a simple reference
server, the following minimum message configuration could be useful:_
+
----------------------------
logconfig =syncall +clockall
----------------------------
+
This configuration will list all clock information and synchronization
information. All other events and messages about peers, system events
and so on is suppressed.

`logfile` _logfile_::
  This command specifies the location of an alternate log file to be
  used instead of the default system _syslog_(3)_ facility. This is the
  same operation as the -l command line option.

`setvar` _variable_ [_default_]::
  This command adds an additional system variable. These variables can
  be used to distribute additional information such as the access
  policy. If the variable of the form _name=value_ is followed by the
  `default` keyword, the variable will be listed as part of the default
  system variables ({ntpqman} rv command). These additional
  variables serve informational purposes only. They are not related to
  the protocol other that they can be listed. The known protocol
  variables will always override any variables defined via
  the `setvar` mechanism. There are three special variables that contain the
  names of all variable of the same group. The `sys_var_list` holds the
  names of all system variables. The `peer_var_list` holds the names of all
  peer variables and the `clock_var_list` holds the names of the reference
  clock variables.

`tinker` [`allan` _allan_ | `dispersion` _dispersion_ | `freq` _freq_ | `huffpuff` _huffpuff_ | `panic` _panic_ | `step` _step_ | `stepback` _stepback_ | `stepfwd` _stepfwd_ | `stepout` _stepout_]::
  This command can be used to alter several system variables in very
  exceptional circumstances. It should occur in the configuration file
  before any other configuration options. The default values of these
  variables have been carefully optimized for a wide range of network
  speeds and reliability expectations. In general, they interact in
  intricate ways that are hard to predict and some combinations can
  result in some very nasty behavior. Very rarely is it necessary to
  change the default values; but, some folks cannot resist twisting the
  knobs anyway and this command is for them. Emphasis added: twisters
  are on their own and can expect no help from the support group.
+
The variables operate as follows:
+
`allan` _allan_;;
    The argument becomes the new value for the minimum Allan intercept,
    which is a parameter of the PLL/FLL clock discipline algorithm. The
    value in log2 seconds defaults to 7 (1024 s), which is also the
    lower limit.
  `dispersion` _dispersion_;;
    The argument becomes the new value for the dispersion increase rate,
    normally .000015 s/s.
  `freq` _freq_;;
    The argument becomes the initial value of the frequency offset in
    parts-per-million. This overrides the value in the frequency file,
    if present, and avoids the initial training state if it is not.
  `huffpuff` _huffpuff_;;
    The argument becomes the new value for the experimental huff-n'-puff
    filter span, which determines the most recent interval the algorithm
    will search for a minimum delay. The lower limit is 900 s (15 m),
    but a more reasonable value is 7200 (2 hours). There is no default,
    since the filter is not enabled unless this command is given.
  `panic` _panic_;;
    The argument is the panic threshold, normally 1000 s. If set to
    zero, the panic sanity check is disabled and a clock offset of any
    value will be accepted.
  `step` _step_;;
    The argument is the step threshold, which by default is 0.128 s. It
    can be set to any positive number in seconds. If set to zero, step
    adjustments will never occur. Note: The kernel time discipline is
    disabled if the step threshold is set to zero or greater than the
    default.
  `stepback` _stepback_;;
    The argument is the step threshold for the backward direction, which
    by default is 0.128 s. It can be set to any positive number in
    seconds. If both the forward and backward step thresholds are set to
    zero, step adjustments will never occur. Note: The kernel time
    discipline is disabled if each direction of step threshold are
    either set to zero or greater than .5 second.
  `stepfwd` _stepfwd_;;
    As for stepback, but for the forward direction.
  `stepout` _stepout_;;
    The argument is the stepout timeout, which by default is 900 s. It
    can be set to any positive number in seconds. If set to zero, the
    stepout pulses will not be suppressed.

`rlimit` [`memlock` _megabytes_ | `stacksize` _4kPages_ | `filenum` _filedescriptors_]::

  `memlock` _megabytes_;;
    Specify the number of megabytes of memory that can be allocated.
    Probably only available under Linux, this option is useful when
    dropping root (the `-i` option). The default is 32 megabytes.
    Setting this to zero will prevent any attemp to lock memory.
  `stacksize` _4kPages_;;
    Specifies the maximum size of the process stack on systems with the
    mlockall()_function. Defaults to 50 4k pages (200 4k pages in OpenBSD).
  `filenum` _filedescriptors_;;
    Specifies the maximum number of file descriptors {ntpd} may have open
    at once. Defaults to the system default.

`trap` _host_address_ [`port` _port_number_] [`interface` _interface_address_]::
  This command configures a trap receiver at the given host address and
  port number for sending messages with the specified local interface
  address. If the port number is unspecified, a value of 18447 is used.
  If the interface address is not specified, the message is sent with a
  source address of the local interface the message is sent through.
  Note that on a multihomed host the interface used may vary from time
  to time with routing changes.
+
The trap receiver will generally log event messages and other
information from the server in a log file. While such monitor programs
may also request their own trap dynamically, configuring a trap
receiver will ensure that no messages are lost when the server is
started.

`hop` `...`::
  This command specifies a list of TTL values in increasing order, up to
  8 values can be specified. In manycast mode these values are used in
  turn in an expanding-ring search. The default is eight multiples of 32
  starting at 31.

== FILES ==

//NAMECHANGE
`/etc/ntp.conf`::
  the default name of the configuration file
_ntp.keys_::
  private MD5 keys
_ntpkey_::
  RSA private key
_ntpkey_host_::
  RSA public key
_ntp_dh_::
  Diffie-Hellman agreement parameters

== EXIT STATUS ==

One of the following exit values will be returned:

0 (EXIT_SUCCESS)::
  Successful program execution.
1 (EXIT_FAILURE)::
  The operation failed or the command syntax was not valid.

== SEE ALSO ==

{ntpdman}, {ntpqman}, {ntpqman}

In addition to the manual pages provided, comprehensive documentation is
available on the world wide web at {project-website}. A snapshot of
this documentation is available in HTML format in `/usr/share/doc/{ntp}`.
David L. Mills, _Network Time Protocol (Version 4)_, RFC5905

== BUGS ==

The syntax checking is not picky; some combinations of ridiculous and
even hilarious options and modes may not be detected.

The _ntpkey_host_ files are really digital certificates. These should be
obtained via secure directory services when they become universally
available.

// end
