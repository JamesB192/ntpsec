= ntp.conf(5) =
:doctype: manpage

== NAME ==
{ntpconf} - Network Time Protocol (NTP) daemon configuration file format

== SYNOPSIS ==
/etc/{ntpconf}

== DESCRIPTION ==

The `{ntpconf}` configuration file is read at initial startup by the
{ntpdman} daemon in order to specify the synchronization
sources, modes and other related information. Usually, it is installed
in the `/etc` directory, but could be installed elsewhere (see the
daemon's `-c` command line option).

The file format is similar to other UNIX configuration files. Comments
begin with a ‘#’ character and extend to the end of the line; blank
lines are ignored. Configuration commands consist of an initial keyword
followed by a list of arguments, some of which may be optional,
separated by whitespace. Commands may not be continued over multiple
lines. Arguments may be host names, host addresses written in numeric,
dotted-quad form, integers, floating point numbers (when specifying
times in seconds) and text strings.

The rest of this page describes the configuration and control options.
The "Notes on Configuring NTP and Setting up an NTP Subnet" page
(available as part of the HTML documentation provided under
`/usr/share/doc/{ntp}) contains an extended discussion of these options.
In addition to the discussion of general 'Configuration Options',
there are sections describing the following supported functionality and
the options used to control it:

* Authentication Support
* Monitoring Support
* Access Control Support
* Automatic NTP Configuration Options
* Reference Clock Support
* Miscellaneous Options

Following these is a section describing 'Miscellaneous Options'.
While there is a rich set of options available, the only required
option is one or more `pool`, `server`, `peer`, `broadcast` or
`manycastclient` commands.

== Configuration Support ==

Following is a description of the configuration commands in
NTPv4. There are two classes of commands, association commands that
configure a persistent association with a remote server or peer or
reference clock, and auxiliary commands that specify environmental
variables that control various related operations.

=== Association Commands ===

The various modes are determined by the command keyword and the type of
the required IP address. Addresses are classed by type as (s) a remote
server or peer (IPv4 class A, B and C), (b) the broadcast address of a
local interface, (m) a multicast address (IPv4 class D), or (r) a
reference clock address (127.127.x.x). For type m addresses the
IANA has assigned the multicast group address IPv4 224.0.1.1 and IPv6
ff05::101 (site local) exclusively to NTP, but other nonconflicting
addresses can be used.

Note that only those options applicable to each command are listed
below. Use of options not listed may not be caught as an error, but
may result in some weird and even destructive behavior.

If the Basic Socket Interface Extensions for IPv6 (RFC-2553) is
detected, support for the IPv6 address family is generated in addition
to the default support of the IPv4 address family. In a few cases,
including the reslist billboard generated by {ntpq}, IPv6 addresses are
automatically generated. IPv6 addresses can be identified by the
presence of colons ":" in the address field. IPv6 addresses can
be used almost everywhere where IPv4 addresses can be used, with the
exception of reference clock addresses, which are always IPv4.

Note that in contexts where a host name is expected, a `-4`or `--ipv4`
qualifier preceding the host name forces DNS resolution to the IPv4
namespace, while a `-6` or `--ipv6' qualifier forces DNS resolution to
the IPv6 namespace. See IPv6 references for the equivalent classes for
that address family.

include::../docs/assoc-commands.txt[]

=== Association Options ===

include::../docs/assoc-options.txt[]

=== Association Auxiliary Commands ===

include::../docs/assoc-auxcommands.txt[]

== Authentication Commands ==

include::../docs/auth-commands.txt[]

== Monitoring Support ==

{ntpdman} includes a comprehensive monitoring facility suitable
for continuous, long term recording of server and client timekeeping
performance. See thestatisticscommand below for a listing and example of
each type of statistics currently supported. Statistic files are managed
using file generation sets and scripts in the ./scripts directory of this
distribution. Using these facilities and UNIX cron(8) jobs, the data
can be automatically summarized and archived for retrospective
analysis.

=== Monitoring Commands ===

include::../docs/mon-commands.txt[]

== Access Control Support ==

The {ntpdman} daemon implements a general purpose address/mask
based restriction list. The list contains address/match entries sorted
first by increasing address values and and then by increasing mask
values. A match occurs when the bitwise AND of the mask and the packet
source address is equal to the bitwise AND of the mask and address in
the list. The list is searched in order with the last match found
defining the restriction flags associated with the entry. Additional
information and examples can be found in the "Notes on Configuring NTP
and Setting up a NTP Subnet" page (available as part of the HTML
documentation provided in `/usr/share/doc/{ntp}`_).

The restriction facility was implemented in conformance with the access
policies for the original NSFnet backbone time servers. Later the
facility was expanded to deflect cryptographic and clogging attacks.
While this facility may be useful for keeping unwanted or broken or
malicious clients from congesting innocent servers, it should not be
considered an alternative to the NTP authentication facilities. Source
address based restrictions are easily circumvented by a determined
cracker.

Clients can be denied service because they are explicitly included in
the restrict list created by the restrict command or implicitly as the
result of cryptographic or rate limit violations. Cryptographic
violations include certificate or identity verification failure; rate
limit violations generally result from defective NTP implementations
that send packets at abusive rates. Some violations cause denied service
only for the offending packet, others cause denied service for a timed
period and others cause the denied service for an indefinate period.
When a client or network is denied access for an indefinate period, the
only way at present to remove the restrictions is by restarting the
server.

=== The Kiss-of-Death Packet ===

Ordinarily, packets denied service are simply dropped with no further
action except incrementing statistics counters. Sometimes a more
proactive response is needed, such as a server message that explicitly
requests the client to stop sending and leave a message for the system
operator. A special packet format has been created for this purpose
called the "kiss-of-death" (KoD) packet. KoD packets have the leap bits
set unsynchronized and stratum set to zero and the reference identifier
field set to a four-byte ASCII code. If the `noserve` or `notrust` flag
of the matching restrict list entry is set, the code is "DENY"; if the
`limited` flag is set and the rate limit is exceeded, the code is
"RATE". Finally, if a cryptographic violation occurs, the code is
"CRYP".

A client receiving a KoD performs a set of sanity checks to minimize
security exposure, then updates the stratum and reference identifier
peer variables, sets the access denied (BOGON4) bit in the peer flash
variable and sends a message to the log. As long as the BOGON4 bit is
set, the client will send no further packets to the server. The only way
at present to recover from this condition is to restart the protocol at
both the client and server. This happens automatically at the client
when the association times out. It will happen at the server only if the
server operator cooperates.

== Access Control Commands ==

include::../docs/access-commands.txt[]

== Automatic NTP Configuration Options ==

=== Manycasting ===

For a detailed description of manycast operation, see the "Server
Discovery" page (available as part of the HTML documentation provided
in `/usr/share/doc/{ntp}`).

=== Manycast Options ===

`tos` [`ceiling` _ceiling_ | `cohort` \{ `0` | `1` } | `floor` _floor_ | `minclock` _minclock_ | `minsane` _minsane_]::
  This command affects the clock selection and clustering algorithms. It
  can be used to select the quality and quantity of peers used to
  synchronize the system clock and is most useful in manycast mode. The
  variables operate as follows:

  `ceiling` _ceiling_;;
    Peers with strata above _ceiling_ will be discarded if there are at
    least _minclock_ peers remaining. This value defaults to 15, but can
    be changed to any number from 1 to 15.
  `cohort` \{0 | 1 };;
    This is a binary flag which enables (0) or disables (1) manycast
    server replies to manycast clients with the same stratum level. This
    is useful to reduce implosions where large numbers of clients with
    the same stratum level are present. The default is to enable these
    replies.
  `floor` _floor_;;
    Peers with strata below _floor_ will be discarded if there are at
    least _minclock_ peers remaining. This value defaults to 1, but can
    be changed to any number from 1 to 15.
  `minclock` _minclock_;;
    The clustering algorithm repeatedly casts out outlyer associations
    until no more than _minclock_ associations remain. This value
    defaults to 3, but can be changed to any number from 1 to the number
    of configured sources.
  `minsane` _minsane_;;
    This is the minimum number of candidates available to the clock
    selection algorithm in order to produce one or more truechimers for
    the clustering algorithm. If fewer than this number are available,
    the clock is undisciplined and allowed to run free. The default is 1
    for legacy purposes. However, according to principles of Byzantine
    agreement, _minsane_ should be at least 4 in order to detect and
    discard a single falseticker.
`ttl` _hop_ `...`::
  This command specifies a list of TTL values in increasing order, up to
  8 values can be specified. In manycast mode these values are used in
  turn in an expanding-ring search. The default is eight multiples of 32
  starting at 31.

== Reference Clock Support ==

For a detailed description of reference-clock configuration, see the
"Reference Clock Drivers" page (available as part of the HTML
documentation provided in `/usr/share/doc/{ntp}`).

== Reference Clock Commands

// This can't be merged with the master description of association
// options (included above) because the cited options have different
// and more specific semantics when used with refclocks.

`server` _127.127.t_._u_ [`prefer`] [`mode` _int_] [`minpoll` _int_]
[`maxpoll` _int_]::
  This command can be used to configure reference clocks in special
  ways. The options are interpreted as follows:

  `prefer`;;
    Marks the reference clock as preferred. All other things being
    equal, this host will be chosen for synchronization among a set of
    correctly operating hosts. See the "Mitigation Rules and the prefer
    Keyword" page (available as part of the HTML documentation provided
    in `/usr/share/doc/{ntp}`) for further information.
  `mode` _int_;;
    Specifies a mode number which is interpreted in a device-specific
    fashion. For instance, it selects a dialing protocol in the ACTS
    driver and a device subtype in the parse drivers.
  `minpoll` _int_; `maxpoll` _int_;;
    These options specify the minimum and maximum polling interval for
    reference clock messages, as a power of 2 in seconds For most
    directly connected reference clocks, both _minpoll_ and _maxpoll_
    default to 6 (64 s). For modem reference clocks, _minpoll_ defaults
    to 10 (17.1 m) and _maxpoll_ defaults to 14 (4.5 h). The allowable
    range is 4 (16 s) to 17 (36.4 h) inclusive.

`fudge` _127.127.t_._u_ [`time1` _sec_] [`time2` _sec_] [`stratum` _int_] [`refid` _string_] [`mode` _int_] [`flag1` `0` | `1`] [`flag2` `0` | `1`] [`flag3` `0` | `1`] [`flag4` `0` | `1`]::
  This command can be used to configure reference clocks in special
  ways. It must immediately follow the `server` command which configures
  the driver. Note that the same capability is possible at run time
  using the {ntpqman} program. The options are interpreted as
  follows:

  `time1` _sec_;;
    Specifies a constant to be added to the time offset produced by the
    driver, a fixed-point decimal number in seconds. This is used as a
    calibration constant to adjust the nominal time offset of a
    particular clock to agree with an external standard, such as a
    precision PPS signal. It also provides a way to correct a systematic
    error or bias due to serial port or operating system latencies,
    different cable lengths or receiver internal delay. The specified
    offset is in addition to the propagation delay provided by other
    means, such as internal DIPswitches. Where a calibration for an
    individual system and driver is available, an approximate correction
    is noted in the driver documentation pages. Note: in order to
    facilitate calibration when more than one radio clock or PPS signal
    is supported, a special calibration feature is available. It takes
    the form of an argument to the `enable` command described in
    "Miscellaneous Options" page and operates as described in the
    "Reference Clock Drivers" page (available as part of the HTML
    documentation provided in `/usr/share/doc/{ntp}`).
  `time2` _secs_;;
    Specifies a fixed-point decimal number in seconds, which is
    interpreted in a driver-dependent way. See the descriptions of
    specific drivers in the "Reference Clock Drivers" page (available as
    part of the HTML documentation provided in `/usr/share/doc/{ntp}`).
  `stratum` _int_;;
    Specifies the stratum number assigned to the driver, an integer
    between 0 and 15. This number overrides the default stratum number
    ordinarily assigned by the driver itself, usually zero.
  `refid` _string_;;
    Specifies an ASCII string of from one to four characters which
    defines the reference identifier used by the driver. This string
    overrides the default identifier ordinarily assigned by the driver
    itself.
  `mode` _int_;;
    Specifies a mode number which is interpreted in a device-specific
    fashion. For instance, it selects a dialing protocol in the ACTS
    driver and a device subtype in the parse drivers.
  `flag1` `0` | `1`; `flag2` `0` | `1`; `flag3` `0` | `1`; `flag4` `0` | `1`;;
    These four flags are used for customizing the clock driver. The
    interpretation of these values, and whether they are used at all, is
    a function of the particular clock driver. However, by convention
    `flag4` is used to enable recording monitoring data to the
    _clockstats_ file configured with the _filegen_ command. Further
    information on the _filegen_ command can be found in "Monitoring
    Options".

== Miscellaneous Options ==

`broadcastdelay` _seconds_::
  The broadcast and multicast modes require a special calibration to
  determine the network delay between the local and remote servers.
  Ordinarily, this is done automatically by the initial protocol
  exchanges between the client and server. In some cases, the
  calibration procedure may fail due to network or server access
  controls, for example. This command specifies the default delay to be
  used under these circumstances. Typically (for Ethernet), a number
  between 0.003 and 0.007 seconds is appropriate. The default when this
  command is not used is 0.004 seconds.

`calldelay` _delay_::
  This option controls the delay in seconds between the first and second
  packets sent in burst or iburst mode to allow additional time for a
  modem or ISDN call to complete.

`driftfile` _driftfile_::
  This command specifies the complete path and name of the file used to
  record the frequency of the local clock oscillator. This is the same
  operation as the `-f` command line option. If the file exists, it is
  read at startup in order to set the initial frequency and then updated
  once per hour with the current frequency computed by the daemon. If
  the file name is specified, but the file itself does not exist, the
  starts with an initial frequency of zero and creates the file when
  writing it for the first time. If this command is not given, the
  daemon will always start with an initial frequency of zero.
+
The file format consists of a single line containing a single floating
point number, which records the frequency offset measured in
parts-per-million (PPM). The file is updated by first writing the
current drift value into a temporary file and then renaming this file
to replace the old version. This implies that {ntpdman} must
have write permission for the directory the drift file is located in,
and that file system links, symbolic or otherwise, should be avoided.

`enable` [`auth` | `bclient` | `calibrate` | `kernel` | `monitor` | `ntp` | `stats`]; `disable` [`auth` | `bclient` | `calibrate` | `kernel` | `monitor` | `ntp` | `stats`]::
  Provides a way to enable or disable various server options. Flags not
  mentioned are unaffected. Note that all of these flags can be
  controlled remotely using the {ntpqman} utility program.

  `auth`;;
    Enables the server to synchronize with unconfigured peers only if
    the peer has been correctly authenticated using either public key or
    private key cryptography. The default for this flag is `enable`.
  `bclient`;;
    Enables the server to listen for a message from a broadcast or
    multicast server, as in the `multicastclient` command with default
    address. The default for this flag is `disable`.
  `calibrate`;;
    Enables the calibrate feature for reference clocks. The default for
    this flag is `disable`.
  `kernel`;;
    Enables the kernel time discipline, if available. The default for
    this flag is `enable` if support is available, otherwise `disable`.
  `monitor`;;
    Enables the monitoring facility. See the {ntpqman} program
    and the monlist command for further information. The default for this
    flag is `enable`.
  `ntp`;;
    Enables time and frequency discipline. In effect, this switch opens
    and closes the feedback loop, which is useful for testing. The
    default for this flag is `enable`.
  `stats`;;
    Enables the statistics facility. See the "Monitoring Options"
    section for further information. The default for this flag is
    `disable`.

`includefile` _includefile_::
  This command allows additional configuration commands to be included
  from a separate file. Include files may be nested to a depth of five;
  upon reaching the end of any include file, command processing resumes
  in the previous configuration file. This option is useful for sites
  that run {ntpdman} on multiple hosts, with (mostly) common
  options (e.g., a restriction list).

`logconfig` _configkeyword_::
  This command controls the amount and type of output written to the
  system _syslog(3)_ facility or the alternate log file. By
  default, all output is turned on. All _configkeyword_ keywords can be
  prefixed with ‘=’, ‘+’ and ‘-’, where ‘=’ sets the syslog(3) priority
  mask, ‘+’ adds and ‘-’ removes messages. syslog(3) messages can be
  controlled in four classes (clock,peer,sys and sync). Within these
  classes four types of messages can be controlled: informational
  messages (info), event messages (events), statistics messages
  (statistics) and status messages (status).
+
Configuration keywords are formed by concatenating the message class
with the event class. The _all_ prefix can be used instead of a
message class. A message class may also be followed by the _all_
keyword to enable/disable all messages of the respective message
class. Thus, a minimal log configuration could look like this:
+
--------------------------------
logconfig =syncstatus +sysevents
--------------------------------
+
This would just list the synchronizations state of
{ntpdman} and the major system events. For a simple reference
server, the following minimum message configuration could be useful:_
+
----------------------------
logconfig =syncall +clockall
----------------------------
+
This configuration will list all clock information and synchronization
information. All other events and messages about peers, system events
and so on is suppressed.

`logfile` _logfile_::
  This command specifies the location of an alternate log file to be
  used instead of the default system _syslog_(3)_ facility. This is the
  same operation as the -l command line option.

`setvar` _variable_ [_default_]::
  This command adds an additional system variable. These variables can
  be used to distribute additional information such as the access
  policy. If the variable of the form _name=value_ is followed by the
  `default` keyword, the variable will be listed as part of the default
  system variables ({ntpqman} rv command). These additional
  variables serve informational purposes only. They are not related to
  the protocol other that they can be listed. The known protocol
  variables will always override any variables defined via
  the `setvar` mechanism. There are three special variables that contain the
  names of all variable of the same group. The `sys_var_list` holds the
  names of all system variables. The `peer_var_list` holds the names of all
  peer variables and the `clock_var_list` holds the names of the reference
  clock variables.

`tinker` [`allan` _allan_ | `dispersion` _dispersion_ | `freq` _freq_ | `huffpuff` _huffpuff_ | `panic` _panic_ | `step` _step_ | `stepback` _stepback_ | `stepfwd` _stepfwd_ | `stepout` _stepout_]::
  This command can be used to alter several system variables in very
  exceptional circumstances. It should occur in the configuration file
  before any other configuration options. The default values of these
  variables have been carefully optimized for a wide range of network
  speeds and reliability expectations. In general, they interact in
  intricate ways that are hard to predict and some combinations can
  result in some very nasty behavior. Very rarely is it necessary to
  change the default values; but, some folks cannot resist twisting the
  knobs anyway and this command is for them. Emphasis added: twisters
  are on their own and can expect no help from the support group.
+
The variables operate as follows:
+
`allan` _allan_;;
    The argument becomes the new value for the minimum Allan intercept,
    which is a parameter of the PLL/FLL clock discipline algorithm. The
    value in log2 seconds defaults to 7 (1024 s), which is also the
    lower limit.
  `dispersion` _dispersion_;;
    The argument becomes the new value for the dispersion increase rate,
    normally .000015 s/s.
  `freq` _freq_;;
    The argument becomes the initial value of the frequency offset in
    parts-per-million. This overrides the value in the frequency file,
    if present, and avoids the initial training state if it is not.
  `huffpuff` _huffpuff_;;
    The argument becomes the new value for the experimental huff-n'-puff
    filter span, which determines the most recent interval the algorithm
    will search for a minimum delay. The lower limit is 900 s (15 m),
    but a more reasonable value is 7200 (2 hours). There is no default,
    since the filter is not enabled unless this command is given.
  `panic` _panic_;;
    The argument is the panic threshold, normally 1000 s. If set to
    zero, the panic sanity check is disabled and a clock offset of any
    value will be accepted.
  `step` _step_;;
    The argument is the step threshold, which by default is 0.128 s. It
    can be set to any positive number in seconds. If set to zero, step
    adjustments will never occur. Note: The kernel time discipline is
    disabled if the step threshold is set to zero or greater than the
    default.
  `stepback` _stepback_;;
    The argument is the step threshold for the backward direction, which
    by default is 0.128 s. It can be set to any positive number in
    seconds. If both the forward and backward step thresholds are set to
    zero, step adjustments will never occur. Note: The kernel time
    discipline is disabled if each direction of step threshold are
    either set to zero or greater than .5 second.
  `stepfwd` _stepfwd_;;
    As for stepback, but for the forward direction.
  `stepout` _stepout_;;
    The argument is the stepout timeout, which by default is 900 s. It
    can be set to any positive number in seconds. If set to zero, the
    stepout pulses will not be suppressed.

`rlimit` [`memlock` _megabytes_ | `stacksize` _4kPages_ | `filenum` _filedescriptors_]::

  `memlock` _megabytes_;;
    Specify the number of megabytes of memory that can be allocated.
    Probably only available under Linux, this option is useful when
    dropping root (the `-i` option). The default is 32 megabytes.
    Setting this to zero will prevent any attemp to lock memory.
  `stacksize` _4kPages_;;
    Specifies the maximum size of the process stack on systems with the
    mlockall()_function. Defaults to 50 4k pages (200 4k pages in OpenBSD).
  `filenum` _filedescriptors_;;
    Specifies the maximum number of file descriptors {ntpd} may have open
    at once. Defaults to the system default.

`trap` _host_address_ [`port` _port_number_] [`interface` _interface_address_]::
  This command configures a trap receiver at the given host address and
  port number for sending messages with the specified local interface
  address. If the port number is unspecified, a value of 18447 is used.
  If the interface address is not specified, the message is sent with a
  source address of the local interface the message is sent through.
  Note that on a multihomed host the interface used may vary from time
  to time with routing changes.
+
The trap receiver will generally log event messages and other
information from the server in a log file. While such monitor programs
may also request their own trap dynamically, configuring a trap
receiver will ensure that no messages are lost when the server is
started.

`hop` `...`::
  This command specifies a list of TTL values in increasing order, up to
  8 values can be specified. In manycast mode these values are used in
  turn in an expanding-ring search. The default is eight multiples of 32
  starting at 31.

== FILES ==

//NAMECHANGE
`/etc/ntp.conf`::
  the default name of the configuration file
_ntp.keys_::
  private MD5 keys
_ntpkey_::
  RSA private key
_ntpkey_host_::
  RSA public key
_ntp_dh_::
  Diffie-Hellman agreement parameters

== EXIT STATUS ==

One of the following exit values will be returned:

0 (EXIT_SUCCESS)::
  Successful program execution.
1 (EXIT_FAILURE)::
  The operation failed or the command syntax was not valid.

== SEE ALSO ==

{ntpdman}, {ntpqman}.

In addition to the manual pages provided, comprehensive documentation is
available on the world wide web at {project-website}. A snapshot of
this documentation is available in HTML format in `/usr/share/doc/{ntp}`.
David L. Mills, _Network Time Protocol (Version 4)_, RFC5905

== BUGS ==

The syntax checking is not picky; some combinations of ridiculous and
even hilarious options and modes may not be detected.

The _ntpkey_host_ files are really digital certificates. These should be
obtained via secure directory services when they become universally
available.

// end
