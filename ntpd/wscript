
def build(ctx):
	srcnode = ctx.srcnode.abspath()
	bldnode = ctx.bldnode.abspath()

	bison_source = [
		"ntp_parser.y"
	]

	ctx(
		target		= "bison_obj",
		features	= "c src_include bld_include libisc_include",
		defines		= ["HAVE_CONFIG_H=1"],
		source		= bison_source,
		includes    = [
						"%s/ntpd/" % srcnode
		]
	)

	ctx.add_group() # Generate Bison files first.


	keyword_gen_source = [
		"keyword-gen.c",
    ]

	ctx(
		target      = "keyword-gen",
		features    = "c cprogram bld_include src_include libisc_include",
# src_include libisc_include",
        source      = keyword_gen_source,
		use			= "ntp isc RT THR PTHREAD",
		includes    = [
						"%s/ntpd/" % bldnode
		],
	)

	# XXX: needs a dependency to rebuild ntp_keyword.h when keyword-gen is rebuilt

	ctx.add_group() # Make sure keyword-gen is created next.

	ctx(
		rule        = "%s/ntpd/keyword-gen ${SRC} > ${TGT}" % bldnode,
		features    = "c bld_include src_include",
		source      = "ntp_parser.tab.h",
		target      = "ntp_keyword.h"
	)


	ctx.add_group() # Make sure ntp_keyword.h is created last.



	libntpd_source = [
		"ntp_control.c",
		"ntp_crypto.c",
		"ntp_filegen.c",
		"ntp_leapsec.c",
		"ntp_loopfilter.c",
		"ntp_monitor.c",
		"ntp_peer.c",
		"ntp_proto.c",
		"ntp_request.c",
		"ntp_restrict.c",
		"ntp_signd.c",
		"ntp_timer.c",
		"ntp_util.c",
	]

	ctx(
		target		= "libntpd_obj",
		features	= "c bld_include src_include libisc_include",
		source		= libntpd_source,
		defines		= ["HAVE_CONFIG_H=1"],
	)

	ctx(
		target		= "ntpd_lib",
		features	= "c cstlib",
		use			= "libntpd_obj bison_obj",
	)


	use_refclock = "" #XXX: there must be a better way to do this
	if ctx.env.REFCLOCK_ENABLE:

		refclock_source = [
			"ntp_refclock.c",
			"refclock_conf.c"
		]

		ctx(
			target		= "refclock",
			features	= "c bld_include src_include libisc_include",
			source		= refclock_source,
			defines		= ["HAVE_CONFIG_H=1", "REFCLOCK=1"],
		)
		use_refclock += "refclock"


		for file, define in ctx.env.REFCLOCK_SOURCE:
			ctx(
				target		= "refclock_%s" % file,
				features	= "c bld_include src_include libisc_include",
				source		= "refclock_%s.c" % file,
				defines		= ["HAVE_CONFIG_H=1", "REFCLOCK=1", "%s=1" % define],
			)
			use_refclock += " refclock_%s" % file




	ntpd_source = [
		"ntp_config.c",
		"ntp_io.c",
		"ntp_scanner.c",
		"ntpd.c",
	]


	# XXX: This really sucks, we need to get rid of all these refclock
	#      defines littered everywhere and segment it to their own source files.
	refclock_define = []
	if ctx.env.REFCLOCK_ENABLE:
		refclock_define = ["REFCLOCK=1"]


	ctx(
		target		= "ntpd",
		features	= "c cprogram bld_include src_include libisc_include libisc_pthread_include ntp_version",
		source		= ntpd_source,
		defines		= ["HAVE_CONFIG_H=1"] + refclock_define,
		use			= "libntpd_obj bison_obj isc ntp opts M parse RT THR PTHREAD CRYPTO %s" % use_refclock,
		includes	= [
						"%s/ntpd/" % bldnode,
						"%s/ntpd/" % srcnode
					],

	)

	ntpdsim_source = [
		"ntp_prio_q.c",
		"ntpsim.c"
	]

