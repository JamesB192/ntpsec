= How-to for NTPsec hackers =

Annoying but necessary legalese:

    By submitting patches to this project, you agree to allow them to be
    redistributed under the project's license according to the normal
    forms and usages of the open-source community.

The code history has been moved to git; the BitKeeper-based advice that used
to live here is obsolete.  As we develop a git-based patch workflow it will be
documented here.

== General notes ==

=== Build system ===

The build uses waf, replacing a huge ancient autoconf hairball that
caused many problems. The waf script is embedded in the top level of
the distribution; run "./waf --help" or consult INSTALL for basic
instructions.

Full waf documentation is at: https://waf.io/

=== C API standards ===

The baseline C standard to write to is ISO/IEC 9899:1999, also known
as C99 (but see the following section on banned functions).  Note that
C99 is a coding standard, not an ABI standard, so it can happily
coexist with distributions that use C89 conventions.

You can download the C99 standard for free from here:
    http://atrey.karlin.mff.cuni.cz/projekty/vrr/doc/c99.pdf

Only POSIX-1.2001/SuSv3 library functions should be used.  If a library
function not in POSIX 2001 is required, then a wrapper function for back
compatibility must be provided.  One notable case is clock_gettime()
which is used, when available, for increased accuracy, and must have a
fallback implementation using native time calls.

You can view POSIX-1.2001, with 2004 Corrigendum, online for free here:
    http://pubs.opengroup.org/onlinepubs/009695399/toc.htm

=== Banned functions ===

The following C99/POSIX functions are BANNED.  They are unsafe, tending to
cause buffer overruns and (all too often) exploitable security holes:

* strcpy, strncpy, strcat:  Use strlcpy and strlcat instead.
* sprintf, vsprintf: use snprintf and vsnprintf instead.
* strtok: unroll this into the obvious loop.
* gets: Use fgets instead. 

=== Cross-platform portability ===

Do not bake in any assumptions about 32-vs-64-bit word size.  It is OK
to assume the code will never run on a 16-bit machine.  When in doubt,
use the fixed-width integral types from <stdint.h>.

Do not assume any particular endianness. When in doubt, use
htons()/htonl()/ntohs()/ntohl() and do your bit-bashing in network
(big-endian) byte order.

Do not assume anything about sign-bit interpretation in chars.  Target
machines may have either signed or unsigned characters.

Do not rely on assumptions about how structure or unions are padded.

Do not assume pointers can be cast to ints, or vice-versa.  While this
is true on effectively all modern hardware, the code runs on some
sufficiently old iron that this is not necessarily the case even if
the compiler and toolchain have been modernized.

=== Coding style and indentation ==

Dr. Dave Mills likes this code indented formatted in a consistent way.
The file "dot.emacs" has the emacs C-mode indentation style that Dave likes.

=== Other languages ===

The only scripting languages allowed and supported are POSIX sh and
Python 2.5. If you find code in the distribution that is in a
scripting language and not one of these, you would be doing us a
favor by translating it into Python or sh.

The reason for this policy is not that we hate all other scripting
languages, it's to reduce the complexity of maintenance and testing
due to multiple languages.

== Patch and change-comment conventions ==

=== Patch format ===

Please submit patches as git format-patch patches *only*.  This ensures that
your change comment and attribution will be properly imported.

If for some reason it is impossible for you to use git format-patch, at least
send context (-c) or unified (-u) diffs rather than the default ed (-e) style,
which is very brittle.

=== Commit comments ===

And please follow git conventions for change comments. That means your comment
should consist of:

* A summary line, never more than 69 characters long and ideally no more than
  50 characters long.  These numbers are set by the window sizes of various
  common web views of git repositories.

* Your summary line should be terse and imperative.  "Fix bug #666" "Add DWIM
  feature" and "Typo repair" are good summary lines.

* If your comment is longer than the summary line, separate it from
  the summary with a blank line.

* The remainder of your comment should be one or more paragraphs line-wrapped at
  72 characters - please do *not* enter entire paragraphs as single lines, it
  makes life more difficult for browsing tools and people viewing the output of
  git format-patch. Bulleted list items are also OK.

* In some cases it may be appropriate to end your summary line with a comma
  or elipsis ("...") to indicate that it runs dictly into a following paragraph.
  You should still try to make the summary self-contained when you do this.

Finally, it is not necessary (and is in fact bad style) to list all
the files a multi-file commit touches in the comment for it.  The
--name-status, --name-only, and --stat options of git log will report
this information to users who want it.  It is still appropriate
to list a file path if you have something specific to say about that
individual file, or if it's the only one touched in a single-file
change and you can easily fit it in the summary line along with your
summary.

Yes, we know the pre-git portions of the history violate some of these.
That was then, this is now.

=== How to refer to previous commits ===

The best (most human-friendly) way to reference a commit is by quoting its
summary line.  If you need to disambiguate, give its date and author.

The worst way is to quote its git hash, because humans are not good at
keeping random strings of hex digits in working memory.  Besides, hashes
will break if the history is ever moved to another VCS or the repository
has to be surgically altered.

//end
