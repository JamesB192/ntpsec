= ntpq(1) =
:doctype: manpage

== NAME ==
ntpq - standard NTP query program

== SYNOPSIS ==
ntpq [-inp] [-c 'command'] ['host'] [...]

== DESCRIPTION ==
The `ntpq` utility program is used to query NTP servers which implement
the standard NTP mode 6 control message formats defined in Appendix B of
the NTPv3 specification RFC1305, requesting information about current
state and/or changes in that state. The same formats are used in NTPv4,
although some of the variables have changed and new ones added. The
description on this page is for the NTPv4 variables.

The program may be run either in interactive mode or controlled using
command line arguments. Requests to read and write arbitrary variables
can be assembled, with raw and pretty-printed output options being
available.  The `ntpq` utility can also obtain and print a list of
peers in a common format by sending multiple queries to the server.

If one or more request options is included on the command line when
`ntpq` is executed, each of the requests will be sent to the NTP
servers running on each of the hosts given as command line arguments,
or on localhost by default. If no request options are given, `ntpq`
will attempt to read commands from the standard input and execute
these on the NTP server running on the first host given on the command
line, again defaulting to localhost when no other host is
specified. The `ntpq` utility will prompt for commands if the standard
input is a terminal device.

`ntpq` uses NTP mode 6 packets to communicate with the NTP server, and
hence can be used to query any compatible server on the network which
permits it. Note that since NTP is a UDP protocol this communication
will be somewhat unreliable, especially over large distances in terms
of network topology. The `ntpq` utility makes one attempt to
retransmit requests, and will time requests out if the remote host is
not heard from within a suitable timeout time.

Specifying a command line option other than `-i` or `-n` will cause the
specified query (queries) to be sent to the indicated host(s)
immediately. Otherwise, `ntpq` will attempt to read interactive format
commands from the standard input.

== Internal Commands ==

Interactive format commands consist of a keyword followed by zero to
four arguments. Only enough characters of the full keyword to uniquely
identify the command need be typed. A number of interactive format
commands are executed entirely within the `ntpq` utility itself and do
not result in NTP mode 6 requests being sent to a server. These are
described following.

`?` [_command_keyword_]; _help_ [_command_keyword_]::
  A ‘?’ by itself will print a list of all the command keywords known to
  this incarnation of `ntpq`. A ‘?’ followed by a command keyword will
  print function and usage information about the command. This command
  is probably a better source of information about `ntpq` than this
  manual page.

`addvars` _variable_name_[_=value_] `...`; `rmvars` _variable_name_ `...`; _clearvars_; _showvars_::
  The data carried by NTP mode 6 messages consists of a list of items of
  the form ‘variable_name=value’, where the ‘=value’ is ignored, and can
  be omitted, in requests to the server to read variables. The `ntpq`
  utility maintains an internal list in which data to be included in
  control messages can be assembled, and sent using the _readlist_ and
   _writelist_ commands described below. The _addvars_ command allows
  variables and their optional values to be added to the list. If more
  than one variable is to be added, the list should be comma-separated
  and not contain white space. The _rmvars_ command can be used to
  remove individual variables from the list, while the _clearlist_
  command removes all variables from the list. The _showvars_ command
  displays the current list of optional variables.
 
`authenticate` [yes | no]::
  Normally `ntpq` does not authenticate requests unless they are write
  requests. The command ‘authenticate yes’ causes `ntpq` to send
  authentication with all requests it makes. Authenticated requests
  causes some servers to handle requests slightly differently, and can
  occasionally melt the CPU in fuzzballs if you turn authentication on
  before doing a _peer_ display. The command ‘authenticate’ causes
  `ntpq` to display whether or not `ntpq` is currently autheinticating
  requests.

`cooked`::
  Causes output from query commands to be "cooked", so that variables
  which are recognized by `ntpq` will have their values reformatted for
  human consumption. Variables which `ntpq` thinks should have a
  decodable value but didn't are marked with a trailing ‘?’.

`debug` [_more_ | _less_ | _off_]::
  With no argument, displays the current debug level. Otherwise, the
  debug level is changed to the indicated level.

`delay` _milliseconds_::
  Specify a time interval to be added to timestamps included in requests
  which require authentication. This is used to enable (unreliable)
  server reconfiguration over long delay network paths or between
  machines whose clocks are unsynchronized. Actually the server does not
  now require timestamps in authenticated requests, so this command may
  be obsolete.

`exit`::
  Exit `ntpq`.

`host` _hostname_::
  Set the host to which future queries will be sent. _hostname_ may be
  either a host name or a numeric address.

`hostnames` [_yes_ | _no_]::
  If _yes_ is specified, host names are printed in information displays.
  If _no_ is specified, numeric addresses are printed instead. The
  default is _yes_, unless modified using the command line `-n` switch.

`keyid` _keyid_::
  This command allows the specification of a key number to be used to
  authenticate configuration requests. This must correspond to the
  _controlkey_ key number the server has been configured to use for this
  purpose.

`keytype` [_md5_ | _OpenSSLDigestType_]::
  Specify the type of key to use for authenticating requests. _md5_ is
  alway supported. If `ntpq` was built with OpenSSL support, any digest
  type supported by OpenSSL can also be provided. If no argument is
  given, the current _keytype_ is displayed.

`ntpversion` [`1` | `2` | `3` | `4`]::
  Sets the NTP version number which `ntpq` claims in packets. Defaults
  to 3, and note that mode 6 control messages (and modes, for that
  matter) didn't exist in NTP version 1. There appear to be no servers
  left which demand version 1. With no argument, displays the current
  NTP version that will be used when communicating with servers.

`passwd`::
  This command prompts you to type in a password (which will not be
  echoed) which will be used to authenticate configuration requests. The
  password must correspond to the key configured for use by the NTP
  server for this purpose if such requests are to be successful.

`quit`::
  Exit `ntpq`.

`raw`::
  Causes all output from query commands is printed as received from the
  remote server. The only formating/interpretation done on the data is
  to transform nonascii data into a printable (but barely
  understandable) form.

`timeout` _milliseconds_::
  Specify a timeout period for responses to server queries. The default
  is about 5000 milliseconds. Note that since `ntpq` retries each query
  once after a timeout, the total waiting time for a timeout will be
  twice the timeout value set.

`version`::
  Print the version of the `ntpq` program.

== Control Message Commands ==

Association IDs are used to identify system, peer and clock variables.
System variables are assigned an association ID of zero and system name
space, while each association is assigned a nonzero association ID and
peer namespace. Most control commands send a single mode-6 message to
the server and expect a single response message. The exceptions are the
_peers_ command, which sends a series of messages, and the _mreadlist_
and _mreadvar_ commands, which iterate over a range of associations.

`associations`::
  Display a list of mobilized associations in the form:
+
---------------------------------------------------------
ind assid status conf reach auth condition last_event cnt
---------------------------------------------------------
+
[options="header"]
|===============================================================================
| String    |Description
| ind       |ndex on this list
| assid     |association ID
| status    |peer status word
| conf      |yes: persistent, no: ephemeral
| reach     |yes: reachable, no: unreachable
| auth      |ok, yes, bad and none
| condition |selection status (see the select field of the peer status word)
| last_event|event report (see the event field of the peer status word)
| cnt       |event count (see the count field of the peer status
|===============================================================================

`authinfo`::
  Display the authentication statistics.

`clockvar` _assocID_ [_name_[_=value_] [] ...]; `cv` _assocID_ [_name_[_=value_] [] ...]::
  Display a list of clock variables for those associations supporting a
  reference clock.

`:config` [...]::
  Send the remainder of the command line, including whitespace, to the
  server as a run-time configuration command in the same format as a
  line in the configuration file. This command is experimental until
  further notice and clarification. Authentication is of course
  required.

`config-from-file` _filename_::
  Send the each line of _filename_ to the server as run-time
  configuration commands in the same format as a line in the
  configuration file. This command is experimental until further notice
  and clarification. Authentication is required.

`ifstats`::
  Display statistics for each local network address. Authentication is
  required.

`iostats`::
  Display network and reference clock I/O statistics.

`kerninfo`::
  Display kernel loop and PPS statistics. As with other ntpq output,
  times are in milliseconds. The precision value displayed is in
  milliseconds as well, unlike the precision system variable.

`lassociations`::
  Perform the same function as the associations command, except display
  mobilized and unmobilized associations.

`lopeers` [`-4` | `-6`]::
  Obtain and print a list of all peers and clients showing _dstadr_
  (associated with any given IP version).

`lpeers` [`-4` | `-6`]::
  Print a peer spreadsheet for the appropriate IP version(s). _dstadr_
  (associated with any given IP version).

`monstats`::
  Display monitor facility statistics.

`mrulist` [_limited_ | _kod_ | `mincount`=_count_ | `laddr`=_localaddr_ | `sort`=_sortorder_ | `resany`=_hexmask_ | `resall`=_hexmask_]::
  Obtain and print traffic counts collected and maintained by the
  monitor facility. With the exception of _sort_=_sortorder_, the
  options filter the list returned by _ntpd._ The _limited_ and _kod_
  options return only entries representing client addresses from which
  the last packet received triggered either discarding or a KoD
  response. The _mincount_=_count_ option filters entries representing
  less than _count_ packets. The _laddr_=_localaddr_ option filters
  entries for packets received on any local address other than
  _localaddr_. _resany_=_hexmask_ and _resall_=_hexmask_ filter entries
  containing none or less than all, respectively, of the bits in
  _hexmask_, which must begin with _0x_. The _sortorder_ defaults to
  _lstint_ and may be any of _addr_, _count_, _avgint_, _lstint_, or any
  of those preceded by a minus sign (hyphen) to reverse the sort order.
  The output columns are:
+
[options="header"]
|===============================================================================
|Column		    | Description
|_lstint_	    | Interval in s between the receipt of the most
		      recent packet from this address and the completion of
  	 	      the retrieval of the MRU list by `ntpq`.
|_avgint_	    | Average interval in s between packets from this address.
|_rstr_		    | Restriction flags associated with this address.
	              Most are copied unchanged from the matching
		      _restrict_ command, however 0x400 (kod) and 0x20
		      (limited) flags are cleared unless the last packet
		      from this address triggered a rate control
		      response.
|_r_		    | Rate control indicator, either a period, _L_ or _K_
		      for no rate control response, rate limiting by
		      discarding, or rate limiting with a KoD response,
		      respectively.
|_m_		    | Packet mode.
|_v_		    | Packet version number.
|_count_	    | Packets received from this address.
|_rport_	    | Source port of last packet from this address.
|_remote_ _address_ | DNS name, numeric address, or address followed
		      by claimed DNS name which could not be verified in
  		      parentheses.
|===============================================================================

`mreadvar` _assocID_ _assocID_ [_variable_name_[=_value_]] ...; `mrv` _assocID_ _assocID_ [_variable_name_[=_value_]] ...::
  Perform the same function as the _readvar_ command, except for a range
  of association IDs. This range is determined from the association list
  cached by the most recent _associations_ command.

`opeers` [`-4` | `-6`]::
  Obtain and print the old-style list of all peers and clients showing
  _dstadr_ (associated with any given IP version), rather than the
  _refid_.

`passociations`::
  Perform the same function as the _associations_ command, except that
  it uses previously stored data rather than making a new query.

`peers`::
  Display a list of peers in the form:
+
------------------------------------------------------------
[tally]remote refid st t when pool reach delay offset jitter
------------------------------------------------------------
+
[options="header"]
|=========================================================================
|Variable	|  Description
|_[tally]_	|  single-character code indicating current value of
                   the _select_ fielof of the "peer status word"
|_remote_	|  host name (or IP number) of peer. The value displayed will be
                   truncated to 15 characters unless the `-w` flag is
		   given, in which case the full value will be
		   displayed on the first line, and the remaining data
		   is displayed on the next line.
|_refid_	|  association ID or "'kiss code"
|_st_		|  stratum
|_t_		|  _u_: unicast or manycast client, _b_: broadcast
		   or multicast client, _l_: local (reference clock),
		   _s_: symmetric (peer), _A_: manycast server,
		   _B_: broadcast server, _M_: multicast server
|_when_		|  sec/min/hr since last received packet
|_poll_		|  poll interval (log2 s)
|_reach_	|  reach shift register (octal)
|_delay_	|  roundtrip delay
|_offset_	|  offset of server relative to this host
|_jitter_	|  jitter
|=========================================================================

`pstats` _assocID_::
  Show the statistics for the peer with the given _assocID_.

`readlist` _assocID_; `rl` _assocID_::
  Read the system or peer variables included in the variable list.

`readvar` _assocID_ _name_[=_value_] [, ...]; `rv` _assocID_ _name_[=_value_] [, ...]::
  Display the specified variables. If _assocID_ is zero, the variables
  are from the _System_ _Variables_ name space, otherwise they are from
  the _Peer_ _Variables_ name space. The _assocID_ is required, as the
  same name can occur in both spaces. If no _name_ is included, all
  operative variables in the name space are displayed. In this case
  only, if the _assocID_ is omitted, it is assumed zero. Multiple names
  are specified with comma separators and without whitespace. Note that
  time values are represented in milliseconds and frequency values in
  parts-per-million (PPM). Some NTP timestamps are represented in the
  format YYYYMMDDTTTT , where YYYY is the year, MM the month of year, DD
  the day of month and TTTT the time of day.

`reslist`::
  Show the access control (restrict) list for `ntpq`.

`saveconfig` _filename_::
  Write the current configuration, including any runtime modifications
  given with _:config_ or _config-from-file_, to the ntpd host's file
  _filename_. This command will be rejected by the server unless
  "saveconfigdir" appears in the _ntpd_ configuration file. _filename_
  can use _strftime_() format specifies to substitute the current date
  and time, for example, _q]saveconfig_ _ntp-%Y%m%d-%H%M%S.confq]_. The
  filename used is stored in system variable _savedconfig_.
  Authentication is required.

`timerstats`::
  Display interval timer counters.

`writelist` _assocID_::
  Write the system or peer variables included in the variable list.

`writevar` _assocID_ _name_=_value_ [, ...]::
  Write the specified variables. If the _assocID_ is zero, the variables
  are from the _System_ _Variables_ name space, otherwise they are from
  the _Peer_ _Variables_ name space. The _assocID_ is required, as the
  same name can occur in both spaces.

`sysinfo`::
  Display operational summary.

`sysstats`::
  Print statistics counters maintained in the protocol module.

== Status Words and Kiss Codes ==

The current state of the operating program is shown in a set of status
words maintained by the system. Status information is also available on
a per-association basis. These words are displayed in the _rv_ and _as_
commands both in hexadecimal and in decoded short tip strings. The
codes, tips and short explanations are documented on the "Event Messages
and Status Words" page. The page also includes a list of system and peer
messages, the code for the latest of which is included in the status
word.

Information resulting from protocol machine state transitions is
displayed using an informal set of ASCII strings called "kiss codes" .
The original purpose was for kiss-o'-death (KoD) packets sent by the
server to advise the client of an unusual condition. They are now
displayed, when appropriate, in the reference identifier field in
various billboards.

== System Variables ==

The following system variables appear in the _rv_ billboard. Not all
variables are displayed in some configurations.

[options="header"]
|=========================================================================
|Variable	|  Description
|_status_	|  "system status word"
|_version_	|  NTP software version and build time
|_processor_	|  hardware platform and version
|_system_	|  operating system and version
|_leap_		|  leap warning indicator (0-3)
|_stratum_	|  stratum (1-15)
|_precision_	|  precision (log2 s)
|_rootdelay_	|  total roundtrip delay to the primary reference clock
|_rootdisp_	|  total dispersion to the primary reference clock
|_peer_		|  system peer association ID
|_tc_		|  time constant and poll exponent (log2 s) (3-17)
|_mintc_	|  minimum time constant (log2 s) (3-10)
|_clock_	|  date and time of day
|_refid_	|  reference ID or "kiss code"
|_reftime_	|  reference time
|_offset_	|  combined offset of server relative to this host
|_sys_jitter_	|  combined system jitter
|_frequency_	|  frequency offset (PPM) relative to hardware clock
|_clk_wander_	|  clock frequency wander (PPM)
|_clk_jitter_	|  clock jitter
|_tai_	|  TAI-UTC offset (s)
|_leapsec_	|  NTP seconds when the next leap second is/was inserted
|_expire_	|  NTP seconds when the NIST leapseconds file expires.

		   The jitter and wander statistics are
		   exponentially-weighted RMS averages. The system
		   jitter is defined in the NTPv4 specification; the
		   clock jitter statistic is computed by the clock
		   discipline module.

		   When the NTPv4 daemon is compiled with the OpenSSL
		   software library, additional system variables are
		   displayed, including some or all of the following,
		   depending on the particular Autokey dance:
|Variable	|  Description
|_host_		|  Autokey host name for this host
|_ident_	|  Autokey group name for this host
|_flags_	|  host flags (see Autokey specification)
|_digest_	|  OpenSSL message digest algorithm
|_signature_	|  OpenSSL digest/signature scheme
|_update_	|  NTP seconds at last signature update
|_cert_		|  certificate subject, issuer and certificate flags
|_until_	|  NTP seconds when the certificate expires
|=========================================================================

== Peer Variables ==

The following peer variables appear in the _rv_ billboard for each
association. Not all variables are displayed in some configurations.

[options="header"]
|=========================================================================
|Variable	|  Description
|_associd_	|  association ID
|_status_	|  "peer status word"
|_srcadr_	|  source (remote) IP address
|_srcport_	|  source (remote) port
|_dstadr_	|  destination (local) IP address
|_dstport_	|  destination (local) port
|_leap_		|  leap indicator (0-3)
|_stratum_	|  stratum (0-15)
|_precision_	|  precision (log2 s)
|_rootdelay_	|  total roundtrip delay to the primary reference clock
|_rootdisp_	|  total root dispersion to the primary reference clock
|_refid_	|  reference ID or "kiss code"
|_reftime_	|  reference time
|_reach_	|  reach register (octal)
|_unreach_	|  unreach counter
|_hmode_	|  host mode (1-6)
|_pmode_	|  peer mode (1-5)
|_hpoll_	|  host poll exponent (log2 s) (3-17)
|_ppoll_	|  peer poll exponent (log2 s) (3-17)
|_headway_	|  headway (see "Rate Management and the Kiss-o'-Death Packet" )
|_flash_	|  "flash status word"
|_offset_	|  filter offset
|_delay_	|  filter delay
|_dispersion_	|  filter dispersion
|_jitter_	|  filter jitter
|_ident_	|  Autokey group name for this association
|_bias_	|  unicast/broadcast bias
|_xleave_	|  interleave delay (see "NTP Interleaved Modes" )

		   The _bias_ variable is calculated when the first
		   broadcast packet is received after the calibration
		   volley. It represents the offset of the broadcast
		   subgraph relative to the unicast subgraph. The
		   _xleave_ variable appears only for the interleaved
		   symmetric and interleaved modes. It represents the
		   internal queuing, buffering and transmission delays
		   for the preceding packet.

		   When the NTPv4 daemon is compiled with the OpenSSL
		   software library, additional peer variables are
		   displayed, including the following:
|Variable	|  Description
|_flags_	|  peer flags (see Autokey specification)
|_host_		|  Autokey server name
|_flags_	|  peer flags (see Autokey specification)
|_signature_	|  OpenSSL digest/signature scheme
|_initsequence_	|  initial key ID
|_initkey_	|  initial key index
|_timestamp_	|  Autokey signature timestamp
|=========================================================================

== Clock Variables

The following clock variables appear in the _cv_ billboard for each
association with a reference clock. Not all variables are displayed in
some configurations.

[options="header"]
|=========================================================================
|Variable	|  Description
|_associd_	|  association ID
|_status_	|  "clock status word"
|_device_	|  device description
|_timecode_	|  ASCII time code string (specific to device)
|_poll_		|  poll messages sent
|_noreply_	|  no reply
|_badformat_	|  bad format
|_baddata_	|  bad date or time
|_fudgetime1_	|  fudge time 1
|_fudgetime2_	|  fudge time 2
|_stratum_	|  driver stratum
|_refid_	|  driver reference ID
|_flags_	|  driver flags
|=========================================================================

== OPTIONS ==

`-4`, `--ipv4`::
  Force IPv4 DNS name resolution. This option must not appear in
  combination with any of the following options: ipv6.
  +
  Force DNS resolution of following host names on the command line to
  the IPv4 namespace.

`-6`, `--ipv6`::
  Force IPv6 DNS name resolution. This option must not appear in
  combination with any of the following options: ipv4.
  +
  Force DNS resolution of following host names on the command line to
  the IPv6 namespace.

`-c` cmd, `--command`=_cmd_::
  run a command and exit. This option may appear an unlimited number of
  times.
  +
  The following argument is interpreted as an interactive format command
  and is added to the list of commands to be executed on the specified
  host(s).

`-d`, `--debug-level`::
  Increase debug verbosity level. This option may appear an unlimited
  number of times.

`-D` number, `--set-debug-level`=_number_::
  Set the debug verbosity level. This option may appear an unlimited
  number of times. This option takes an integer number as its argument.

`-i`, `--interactive`::
  Force ntpq to operate in interactive mode. This option must not appear
  in combination with any of the following options: command, peers.
  +
  Force `ntpq` to operate in interactive mode. Prompts will be written
  to the standard output and commands read from the standard input.

`-n`, `--numeric`::
  numeric host addresses.
  +
  Output all host addresses in dotted-quad numeric format rather than
  converting to the canonical host names.

`--old-rv`::
  Always output status line with readvar.
  +
  By default, `ntpq` now suppresses the _associd=..._ line that precedes
  the output of _readvar_ (alias _rv_) when a single variable is
  requested, such as `ntpq -c "rv 0 offset"`. This option causes `ntpq`
  to include both lines of output for a single-variable _readvar_. Using
  an environment variable to preset this option in a script will enable
  both older and newer `ntpq` to behave identically in this regard.

`-p`, `--peers`::
  Print a list of the peers. This option must not appear in combination
  with any of the following options: interactive.
  +
  Print a list of the peers known to the server as well as a summary of
  their state. This is equivalent to the 'peers' interactive command.

`-w`, `--wide`::
  Display the full 'remote' value.
  +
  Display the full value of the 'remote' value. If this requires more
  than 15 characters, display the full value, emit a newline, and
  continue the data display properly indented on the next line.

`-?`, `--help`::
  Display usage information and exit.

`-!`, `--more-help`::
  Pass the extended usage information through a pager.

`->` cfgfile, `--save-opts` [=_cfgfile_]::
  Save the option state to _cfgfile_. The default is the _last_
  configuration file listed in the _OPTION PRESETS_ section, below. The

command will exit after updating the config file.
`-<` cfgfile, `--load-opts`=_cfgfile_, `--no-load-opts`::
  Load options from _cfgfile_. The _no-load-opts_ form will disable the
  loading of earlier config/rc/ini files. `--no-load-opts` is handled
  early, out of order.

`--version` [\{_v|c|n_}]::
  Output version of program and exit. The default mode is `v', a simple
  version. The `c' mode will print copyright information and `n' will
  print the full copyright notice.

== EXIT STATUS ==

One of the following exit values will be returned:

0 (EXIT_SUCCESS)::
  Successful program execution.
1 (EXIT_FAILURE)::
  The operation failed or the command syntax was not valid.
66 (EX_NOINPUT)::
  A specified configuration file could not be loaded.

== AUTHORS ==

//FIXME: NTF reference
The University of Delaware and Network Time Foundation

== COPYRIGHT ==

Copyright (C) 1992-2015 The University of Delaware and Network Time
Foundation all rights reserved. This program is released under the terms
of the NTP license, <http://ntp.org/license>.

== BUGS ==

//FIXME: ntp.org reference
Please send bug reports to: http://bugs.ntp.org, bugs@ntp.org
