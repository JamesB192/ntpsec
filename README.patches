= Patch and change-comment conventions =

See README.hackers for notes on coding styles.

The code history has been moved to git; the BitKeeper-based advice that used
to live here is obsolete.  As we develop a git-based patch workflow it will be
documented here.

== Patch format ==

Please submit patches as git fast-format patches *only*.  This ensures that
your change comment and attribution will be properly imported.

If for some reason it is impossible for you to use git fast-format, at least
send context (-c) or unified (-u) diffs rather than the default ed (-e) style,
which is very brittle.

== Commit comments ==

And please follow git conventions for change comments. That means your comment
should consist of:

* A summary line, never more than 69 characters long and ideally no more than
  50 characters long.  These numbers are set by the window sizes of various
  common web views of git repositories.

* Your summary line should be terse and imperative.  "Fix bug #666" "Add DWIM
  feature" and "Typo repair" are good summary lines.

* If your comment is longer than the summary line, separate it from
  the summary with a blank line.

* The remainder of your comment should be one or more paragraphs line-wrapped at
  72 characters - please do *not* enter entire paragraphs as single lines, it
  makes life more difficult for browsing tools and people viewing the output of
  git-format-patch. Bulleted list items are also OK.

* In some cases it may be appropriate to end your summary line with a comma
  or elipsis ("...") to indicate that it runs dictly into a following paragraph.
  You should still try to make the summary self-contained when you do this.

Finally, it is not necessary (and is in fact bad style) to list all
the files a multi-file commit touches in the comment for it.  The
--name-status, --name-only, and --stat options of git log will report
this information to users who want it.  It is still appropriate
to list a file path if you have something specific to say about that
individual file, or if it's the only one touched in a single-file
change and you can easily fit it in the summary line alonmg with your
summary.

Yes, we know the pre-git portions of the history violate some of these.
That was then, this is now.

== How to refer to previous commits ==

The best (most human-friendly) way to reference a commit is by quoting its
summary line.  If you need to disambiguate, give is date and author.

The worst way is to quote its git hash, because humans are not good at
keeping random strings of hex digits in working memory.  Besides, hashes
will break if the history is ever moved to another VCS or the repository
has to be surgically altered.


